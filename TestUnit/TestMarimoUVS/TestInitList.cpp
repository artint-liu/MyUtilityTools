#include <GrapX.h>
#include <clTokens.h>
#include <clStringSet.h>
#include <Smart/SmartStream.h>
#include <clStablePool.h>
#include "UniVersalShader/ArithmeticExpression.h"
#include "UniVersalShader/ExpressionParser.h"

#define _I_ __FILE__,__LINE__

struct CONSTEXPR
{
  GXLPCSTR szExpression;
  int    value;
};

struct INITLIST_SAMPLE
{
  GXLPCSTR szFilename;
  int nLine;
  GXLPCSTR szExpression;
  GXLPCSTR szResult;    // 类型序列化信息
  GXLPCSTR szRearrange; // 重新整理的初始化列表，如果为NULL则从szResult推导

  CONSTEXPR aConstSample[10]; // 常量表达式测试
};

#define TO_STR(X) #X
#define TO_STR2(X) TO_STR(X)
#define SET_LINE "#line " TO_STR2(__LINE__) "\r\n" // 这个行数+1才是INITLIST_SAMPLE结构体行数


// 测试几种形式的常量：
// a[0].x
// a.x[0]
// a[0][0].x
// a.x[0][0]
// a[0].x[0]
// a.b.x[0]
// a.b[0].x
// a[0].b.x

INITLIST_SAMPLE g_aInitListSample[] = {
#if 1
  {_I_, SET_LINE "int2 vo; const float4 vv = {vo, 0};", "<float4>{vo,0}", "{vo,0}"},
  {_I_, SET_LINE "const int2 vo = {4,16}; const float4 vv = {vo, 0};", "<float4>{4.000,16.000,0}", "{$R,$R,0}"},
  {_I_, SET_LINE "const float4 vv = {{4,16}, 0};", "[ERROR]"}, // 没测试HLSL是否承认这种语法
  {_I_, SET_LINE "float2 s; const float2 a2[2] = {0,s,1};",}, // HLSL承认这种语法,但是我先不打算支持这种语法了
  {_I_, SET_LINE "const float3 v0 = {1,2,3};", "<float3>{1,2,3}"},
  {_I_, SET_LINE "const float3 v0 = {1,2,3}; const float3 v0_1[] = {v0,v0,v0,v0};", "<float3*4>{<float3>{1.000,2.000,3.000},<float3>{1.000,2.000,3.000},<float3>{1.000,2.000,3.000},<float3>{1.000,2.000,3.000}}", "{{$R,$R,$R},{$R,$R,$R},{$R,$R,$R},{$R,$R,$R}}"},
  {_I_, SET_LINE "const float3 v1 = {float3(1,2,3)};", "<float3>{1.000,2.000,3.000}", "{$R,$R,$R}"}, // 修订过，在HLSL中测试过可以这样定义
  {_I_, SET_LINE "const float3 v1_0 = {{float3(1,2,3)}};", "[ERROR]"}, // 在HLSL中可以这样定义,但是这里不打算支持这种写法了
  {_I_, SET_LINE "const float3 v1_1[] = float3(1,2,3);", "[ERROR]"},
  {_I_, SET_LINE "const float3 v1_2[] = 1;", "[ERROR]"},
  {_I_, SET_LINE "const float3 v2[] = {float3(1,2,3)};", "<float3*1>{<float3>{1.000,2.000,3.000}}", "{{$R,$R,$R}}"},
  {_I_, SET_LINE "const float3 v3[] = {float3(1,2,3),{4,5,6},7,8,9};", "<float3*3>{<float3>{1.000,2.000,3.000},<float3>{4,5,6},<float3>{7,8,9}}", "{{$R,$R,$R},{4,5,6},{7,8,9}}"},
  {_I_, SET_LINE "const float3 v4[] = {{1,2,3},float3(4,5,6),7,8,9};", "<float3*3>{<float3>{1,2,3},<float3>{4.000,5.000,6.000},<float3>{7,8,9}}", "{{1,2,3},{$R,$R,$R},{7,8,9}}"},
  {_I_, SET_LINE "const float3 v5[] = {1,2,3,float3(4,5,6),7,8,9};", "<float3*3>{<float3>{1,2,3},<float3>{4.000,5.000,6.000},<float3>{7,8,9}}", "{{1,2,3},{$R,$R,$R},{7,8,9}}"},
  {_I_, SET_LINE "const float3 v6[] = {1,2,float3(3,4,5),6,7,8,9};", "[ERROR]"},
  {_I_, SET_LINE "const float v6_1[] = {1,2,float3(3,4,5),6,7,8,9};", "[ERROR]"},
  {_I_, SET_LINE "const float3 v7[] = {float3(1,2,3),float3(4,5,6),float3(7,8,9)};", "<float3*3>{<float3>{1.000,2.000,3.000},<float3>{4.000,5.000,6.000},<float3>{7.000,8.000,9.000}}", "{{$R,$R,$R},{$R,$R,$R},{$R,$R,$R}}"},
  {_I_, SET_LINE "const float3 v8[][2] = {float3(1,2,3),float3(4,5,6),float3(7,8,9)};", "<float3*2*2>{<float3*2>{<float3>{1.000,2.000,3.000},<float3>{4.000,5.000,6.000}},<float3*2>{<float3>{7.000,8.000,9.000}}}", "{{{$R,$R,$R},{$R,$R,$R}},{{$R,$R,$R}}}"},
  {_I_, SET_LINE "float a; float v9[] = {a, a + 1,a + 2};", "<float*3>{a,a+1,a+2}", "{a,a+1,a+2}"},
  {_I_, SET_LINE "const float3 v10[] = {float3(1,2,3)*2};", "<float3*1>{<float3>{2.000,4.000,6.000}}", "{{$R,$R,$R}}"},
  {_I_, SET_LINE "const float4 v11[] = {float2(1,2)*2,3,4};", "<float4*1>{<float4>{2.000,4.000,3,4}}","{{$R,$R,3,4}}"}, // 修订过，数学结构在初始化列表中由后面元素补足定义长度
  {_I_, SET_LINE "float a; float3 v12[] = {float3(a,a+1,a+2)*2};", "<float3*1>{<float3>{float3(a,a+1,a+2)*2}}", "{{float3(a,a+1,a+2)*2}}"},
  {_I_, SET_LINE "float a; float4 v13[] = {float2(a+1,a+2)*2,3,4};", "<float4*1>{<float4>{float2(a+1,a+2)*2,3,4}}","{{float2(a+1,a+2)*2,3,4}}"}, // 修订过，数学结构在初始化列表中由后面元素补足定义长度
  {_I_, SET_LINE "float a; float3 v14[] = {{1,2,3},float3(a,a+1,a+2)*2,7,8,9};", "<float3*3>{<float3>{1,2,3},<float3>{float3(a,a+1,a+2)*2},<float3>{7,8,9}}", "{{1,2,3},{float3(a,a+1,a+2)*2},{7,8,9}}"},
  {_I_, SET_LINE "float a; float3 v16[] = {1,2,float3(a,a+1,a+2)*2,6,7,8,9};", "[ERROR]"},
  {_I_, SET_LINE "float a; float3 v20[] = {{1,2,3},float4(a,a+1,a+2)*2,7,8,9};", "[ERROR]"},

  {_I_, SET_LINE "const int a = {2};", "<int>{2}", NULL, {"a",2}},
  {_I_, SET_LINE "const int a = {2, 3};", "[ERROR]"},
  {_I_, SET_LINE "const int a[2] = {2,3,4};", "[ERROR]"},
  {_I_, SET_LINE "const int a[3] = {2,3,4};", "<int*3>{2,3,4}", NULL, {"a[0]", 2, "a[2]", 4, "a[2]*a[2]", 16}},
  {_I_, SET_LINE "const int a0[3] = { {2}, {3}, {4} };", "<int*3>{2,3,4}"},
  {_I_, SET_LINE "const int a1[3] = { {{2}}, {{3}}, {{4}} };", "<int*3>{2,3,4}"},
  {_I_, SET_LINE "const int a2[3] = { {{{2}}}, {{{3}}}, {{{4}}} };", "<int*3>{2,3,4}"},
  {_I_, SET_LINE "const int a3[4] = { 2, 3, 4 };", "<int*4>{2,3,4}"},
  {_I_, SET_LINE "const int a4[4] = { {2}, 3, 4 };", "<int*4>{2,3,4}"},
  {_I_, SET_LINE "const int a5[4] = { {{2}}, 3, 4 };", "<int*4>{2,3,4}"},
  {_I_, SET_LINE "const int a6[4] = { {{2}},{3},4 };", "<int*4>{2,3,4}"},
  {_I_, SET_LINE "const int a7[4] = { {2},{{3}},4 };", "<int*4>{2,3,4}"},
  {_I_, SET_LINE "const int a10[3] = {{2},{3,4}};", "[ERROR]"},
  {_I_, SET_LINE "const int a11[4] = {{},2,3,4};", "<int*4>{0,2,3,4}", "{$R,2,3,4}"},
  {_I_, SET_LINE "const int a12[4] = {1,2,3,4,};", "<int*4>{1,2,3,4}"},
  {_I_, SET_LINE "const int a13[5] = {,1,2,3,4,};", "[ERROR]"},
  {_I_, SET_LINE "const int a14[5] = {1,2,,3,4,};", "[ERROR]"},

  {_I_, SET_LINE "const int b0[3] = { {2}, {3}, {4} };", "<int*3>{2,3,4}"},
  {_I_, SET_LINE "const int b0[4][3] = { {2,3,4,5}, {3}, {4} };", "[ERROR]"},
  {_I_, SET_LINE "const int b1[4][3] = { {2}, {3}, {4} };", "<int*3*4>{<int*3>{2},<int*3>{3},<int*3>{4}}"},
  {_I_, SET_LINE "const int b2[3][2] = {{1},2,3};", "<int*2*3>{<int*2>{1},<int*2>{2,3}}"},
  {_I_, SET_LINE "const int b3[4][3][2] = {{{1},2},3};", "<int*2*3*4>{<int*2*3>{<int*2>{1},<int*2>{2}},<int*2*3>{<int*2>{3}}}"},
  {_I_, SET_LINE "const int b4[3][2] = { {1},2,{3} };",  "<int*2*3>{<int*2>{1},<int*2>{2,3}}"},
  {_I_, SET_LINE "const int b5[4][3][2] = {{1},2,{3}};", "<int*2*3*4>{<int*2*3>{<int*2>{1}},<int*2*3>{<int*2>{2,3}}}"},
  {_I_, SET_LINE "const int b6[3][2] = {1,{2},{3}};",    "<int*2*3>{<int*2>{1,2},<int*2>{3}}"},

  {_I_, SET_LINE "const int c0[4][3] = { 2, 3, 4 };", "<int*3*4>{<int*3>{2,3,4}}"},
  {_I_, SET_LINE "const int f[6][4] = { {1,2,3}, {4,5,6}, {7,8,9} };", "<int*4*6>{<int*4>{1,2,3},<int*4>{4,5,6},<int*4>{7,8,9}}"},
  {_I_, SET_LINE "const int g0[9][6] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} };", "<int*6*9>{<int*6>{1},<int*6>{2},<int*6>{3},<int*6>{4},<int*6>{5},<int*6>{6},<int*6>{7},<int*6>{8},<int*6>{9}}"},
  {_I_, SET_LINE "const int g1[6][9] = {{ {1},{2},{3}, {4},{5},{6}, {7},{8},{9} }};", "<int*9*6>{<int*9>{1,2,3,4,5,6,7,8,9}}"},


  // 饱和列表，列表储存达到上限的元素
  {_I_, SET_LINE "const int q2_1[2][2][2][2] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};","<int*2*2*2*2>{<int*2*2*2>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}},<int*2*2>{<int*2>{5,6},<int*2>{7,8}}},<int*2*2*2>{<int*2*2>{<int*2>{9,10},<int*2>{11,12}},<int*2*2>{<int*2>{13,14},<int*2>{15,16}}}}"},
  {_I_, SET_LINE "const int q2_2[2][2][2][2] = {{1,2,3,4,5,6,7,8}};","<int*2*2*2*2>{<int*2*2*2>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}},<int*2*2>{<int*2>{5,6},<int*2>{7,8}}}}"},
  {_I_, SET_LINE "const int q2_3[2][2][2][2] = {{{1,2,3,4}}};","<int*2*2*2*2>{<int*2*2*2>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}}}}"},
  {_I_, SET_LINE "const int q2_4[2][2][2][2] = {{{{1,2}}}};","<int*2*2*2*2>{<int*2*2*2>{<int*2*2>{<int*2>{1,2}}}}"},
  {_I_, SET_LINE "const int q2_5[2][2][2][2] = {{{{{1},{2}}}}};","<int*2*2*2*2>{<int*2*2*2>{<int*2*2>{<int*2>{1,2}}}}"},
  
  {_I_, SET_LINE "const int tr1[3][6][9] = { 1,2,3,4,5,6,7,8,9 };", "<int*9*6*3>{<int*9*6>{<int*9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE "const int tr2[3][6][9] = {{ 1,2,3,4,5,6,7,8,9 }};", "<int*9*6*3>{<int*9*6>{<int*9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE "const int tr3[3][6][9] = {{{ 1,2,3,4,5,6,7,8,9 }}};", "<int*9*6*3>{<int*9*6>{<int*9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE "const int tr4[3][6][9] = {{{ {1},{2},{3},{4},{5},{6},{7},{8},{9} }}};", "<int*9*6*3>{<int*9*6>{<int*9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE "const int tr5[3][6][9] = {{{ {{1},{2},{3},{4},{5},{6},{7},{8},{9}} }}};", "[ERROR]"},
  
  {_I_, SET_LINE "const int qu1[3][9][4] = {{ 1,2,3,4,5,6,7,8,9 }};", "<int*4*9*3>{<int*4*9>{<int*4>{1,2,3,4},<int*4>{5,6,7,8},<int*4>{9}}}"},
  {_I_, SET_LINE "const int qu2[3][9][4] = { { 1,2,3,4,5,6},{7,8,9 } };", "<int*4*9*3>{<int*4*9>{<int*4>{1,2,3,4},<int*4>{5,6}},<int*4*9>{<int*4>{7,8,9}}}"},
  {_I_, SET_LINE "const int qu3[3][9][4] = {{ {1},{2},{3},{4},{5},{6},{7},{8},{9} }};", "<int*4*9*3>{<int*4*9>{<int*4>{1},<int*4>{2},<int*4>{3},<int*4>{4},<int*4>{5},<int*4>{6},<int*4>{7},<int*4>{8},<int*4>{9}}}"},
  {_I_, SET_LINE "const int qu4[3][9][4] = {{ {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} }};", "<int*4*9*3>{<int*4*9>{<int*4>{1},<int*4>{2},<int*4>{3},<int*4>{4},<int*4>{5},<int*4>{6},<int*4>{7},<int*4>{8},<int*4>{9}}}"},
  {_I_, SET_LINE "const int qu5[3][9][4] = { {1},{2},{3} };", "<int*4*9*3>{<int*4*9>{<int*4>{1}},<int*4*9>{<int*4>{2}},<int*4*9>{<int*4>{3}}}"},
  {_I_, SET_LINE "const int qu6[3][9][4] = { {{1}},{{2}},{{3}} };", "<int*4*9*3>{<int*4*9>{<int*4>{1}},<int*4*9>{<int*4>{2}},<int*4*9>{<int*4>{3}}}"},
  {_I_, SET_LINE "const int qu7[3][2][4] = { {1,2,3,4,5,6,7,8},{11,12,13,14,15,16,17,18},{21,22,23,24,25,26,27,28} };", "<int*4*2*3>{<int*4*2>{<int*4>{1,2,3,4},<int*4>{5,6,7,8}},<int*4*2>{<int*4>{11,12,13,14},<int*4>{15,16,17,18}},<int*4*2>{<int*4>{21,22,23,24},<int*4>{25,26,27,28}}}"},

  {_I_, SET_LINE "const int nn1[9][6][4] = { 1,2,3,4,5,6,7,8,9 };", "<int*4*6*9>{<int*4*6>{<int*4>{1,2,3,4},<int*4>{5,6,7,8},<int*4>{9}}}"},
  {_I_, SET_LINE "const int nn2[9][6][4] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} };",                   "<int*4*6*9>{<int*4*6>{<int*4>{1}},<int*4*6>{<int*4>{2}},<int*4*6>{<int*4>{3}},<int*4*6>{<int*4>{4}},<int*4*6>{<int*4>{5}},<int*4*6>{<int*4>{6}},<int*4*6>{<int*4>{7}},<int*4*6>{<int*4>{8}},<int*4*6>{<int*4>{9}}}"},
  {_I_, SET_LINE "const int nn3[9][6][4] = { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} };", "<int*4*6*9>{<int*4*6>{<int*4>{1}},<int*4*6>{<int*4>{2}},<int*4*6>{<int*4>{3}},<int*4*6>{<int*4>{4}},<int*4*6>{<int*4>{5}},<int*4*6>{<int*4>{6}},<int*4*6>{<int*4>{7}},<int*4*6>{<int*4>{8}},<int*4*6>{<int*4>{9}}}"},
  {_I_, SET_LINE "const int nn4[9][6][4] = { {{{1}}},{{{2}}},{{{3}}},{{{4}}},{{{5}}},{{{6}}},{{{{7}}}},{{{8}}},{{{9}}} };", "<int*4*6*9>{<int*4*6>{<int*4>{1}},<int*4*6>{<int*4>{2}},<int*4*6>{<int*4>{3}},<int*4*6>{<int*4>{4}},<int*4*6>{<int*4>{5}},<int*4*6>{<int*4>{6}},<int*4*6>{<int*4>{7}},<int*4*6>{<int*4>{8}},<int*4*6>{<int*4>{9}}}"},
  
  {_I_, SET_LINE "const int h3[6][9] = { {2,3,6, 2,4,3, 2,4,3} };", "<int*9*6>{<int*9>{2,3,6,2,4,3,2,4,3}}"},
  {_I_, SET_LINE "const int h4[9][9][9] = { {2,{3},4,5,6,7,8,9,10,11} };", "<int*9*9*9>{<int*9*9>{<int*9>{2,3,4,5,6,7,8,9,10},<int*9>{11}}}"},
  {_I_, SET_LINE "const int h4b[9][9][9] = { 2,{3},4,5,6,7,8,9,10,11 };", "<int*9*9*9>{<int*9*9>{<int*9>{2,3,4,5,6,7,8,9,10},<int*9>{11}}}"},
  {_I_, SET_LINE "const int h4c[9][9][9] = { 2,{3,0},4,5,6,7,8,9,10,11 };", "[ERROR]"},
  {_I_, SET_LINE "const int h5[9][9][9] = { {2,{{{{{3}}}}},4,5,6,7,8,9,10,11} };", "<int*9*9*9>{<int*9*9>{<int*9>{2,3,4,5,6,7,8,9,10},<int*9>{11}}}"},
  {_I_, SET_LINE "const int h5a[9][9][9] = { {{{2}},{{{{{3}}}}},4,5,6,7,8,9,10,11} };", "<int*9*9*9>{<int*9*9>{<int*9>{2},<int*9>{3},<int*9>{4,5,6,7,8,9,10,11}}}"},
  {_I_, SET_LINE "const int h6[4][2] = {0, 5, {1, 3}, 0, 2, 4};", "<int*2*4>{<int*2>{0,5},<int*2>{1,3},<int*2>{0,2},<int*2>{4}}"},
  {_I_, SET_LINE "const int h7[4][2] = {0, 5, {1}, 0, 2, 4};", "<int*2*4>{<int*2>{0,5},<int*2>{1},<int*2>{0,2},<int*2>{4}}"},
  {_I_, SET_LINE "const int h8[4][3] = {0, 5, {1}, 0, 2, 4};", "<int*3*4>{<int*3>{0,5,1},<int*3>{0,2,4}}"},


  {_I_, SET_LINE "const int grou0[3][3][3] = {{0},{5},{6}};", "<int*3*3*3>{<int*3*3>{<int*3>{0}},<int*3*3>{<int*3>{5}},<int*3*3>{<int*3>{6}}}"},// {{{0}},{{5}},{{6}}}
  {_I_, SET_LINE "const int grou1[3][3][3] = {{0,1,2},{5},{6}};", "<int*3*3*3>{<int*3*3>{<int*3>{0,1,2}},<int*3*3>{<int*3>{5}},<int*3*3>{<int*3>{6}}}"},// {{{0,1,2}},{{5}},{{6}}}
  {_I_, SET_LINE "const int grou2[3][3][3] = {{1}, 2, 3, 4, 5, 6, 7, 8};", "<int*3*3*3>{<int*3*3>{<int*3>{1}},<int*3*3>{<int*3>{2,3,4},<int*3>{5,6,7},<int*3>{8}}}"},// {{{1}},{{2,3,4},{5,6,7},{8}}}
  {_I_, SET_LINE "const int grou3[3][3][3] = { 1, {2}, 3, 4, 5, 6, 7, 8 };", "<int*3*3*3>{<int*3*3>{<int*3>{1,2,3},<int*3>{4,5,6},<int*3>{7,8}}}"},// {{{1,2,3},{4,5,6},{7,8}}}
  {_I_, SET_LINE "const int grou4[3][3][3] = { 1, 2, {3}, 4, 5, 6, 7, 8 };", "<int*3*3*3>{<int*3*3>{<int*3>{1,2,3},<int*3>{4,5,6},<int*3>{7,8}}}"},// {{{1,2,3},{4,5,6},{7,8}}}
  {_I_, SET_LINE "const int grou5[3][3][3] = { 1, {2, 3}, 4, 5, 6, 7, 8 };", "[ERROR]"},// [ERROR]
  {_I_, SET_LINE "const int grou6[3][3][3] = { 1, {{2}, 3}, 4, 5, 6, 7, 8 };", "[ERROR]"},// [ERROR]
  {_I_, SET_LINE "const int grou7[3][3][3] = { 1, 2, 3, {4}, 5, 6, 7, 8 };", "<int*3*3*3>{<int*3*3>{<int*3>{1,2,3},<int*3>{4},<int*3>{5,6,7}},<int*3*3>{<int*3>{8}}}"},// {{{1,2,3},{4},{5,6,7}},{{8}}}
  {_I_, SET_LINE "const int grou8[3][3][3] = { {1, 2, 3}, 4, 5, 6, 7, 8 };", "<int*3*3*3>{<int*3*3>{<int*3>{1,2,3}},<int*3*3>{<int*3>{4,5,6},<int*3>{7,8}}}"},// {{{1,2,3}},{{4,5,6},{7,8}}}
  {_I_, SET_LINE "const int grou9[2][3][3] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 };", "[ERROR]"},
  {_I_, SET_LINE "const int grou10[3][3][3]={1,{2,3},4,5,6,7,8,9};", "[ERROR]"}, // [ERROR]
  {_I_, SET_LINE "const int grou11[3][3][3]={1,{2,3,4},5,6,7,8,9};", "[ERROR]"}, // [ERROR]
  {_I_, SET_LINE "const int grou12[3][3][3]={1,{2,{}},3,4,5,6,7,8,9};", "[ERROR]"}, // [ERROR] C2078
  {_I_, SET_LINE "const int grou13[3][3][3]={1,{2,},3,4,5,6,7,8,9};", "<int*3*3*3>{<int*3*3>{<int*3>{1,2,3},<int*3>{4,5,6},<int*3>{7,8,9}}}"}, // {{{1,2,3},{4,5,6},{7,8,9}}}
  {_I_, SET_LINE "const int grou14[3][3][3]={1,{,2},3,4,5,6,7,8,9};", "[ERROR]"}, // [ERROR]

  {_I_, SET_LINE "const int arr_9[4][2][2] = { 1,{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };", "<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}},<int*2*2>{<int*2>{5,6},<int*2>{7,8}},<int*2*2>{<int*2>{9,10},<int*2>{11,12}},<int*2*2>{<int*2>{13,14},<int*2>{15}}}"}, //[4][2][2]

  // 测试自适应长度
  {_I_, SET_LINE "const int a[3][][2] = {2,3,4};", "[ERROR]"}, // 缺少下标
  {_I_, SET_LINE "const int a[] = {2,3,4};", "<int*3>{2,3,4}"},
  
  {_I_, SET_LINE "const int autoleng_0[][2][2] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};","<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}},<int*2*2>{<int*2>{5,6},<int*2>{7,8}},<int*2*2>{<int*2>{9,10},<int*2>{11,12}},<int*2*2>{<int*2>{13,14},<int*2>{15}}}"}, // [4][2][2] 
  {_I_, SET_LINE "const int autoleng_1[][2][2] = { {1},2,3,4,5,6,7,8,9,10,11,12,13,14,15 };", "<int*2*2*5>{<int*2*2>{<int*2>{1}},<int*2*2>{<int*2>{2,3},<int*2>{4,5}},<int*2*2>{<int*2>{6,7},<int*2>{8,9}},<int*2*2>{<int*2>{10,11},<int*2>{12,13}},<int*2*2>{<int*2>{14,15}}}"}, //[5][2][2]
  {_I_, SET_LINE "const int autoleng_2[][2][2] = { {1},{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };", "<int*2*2*6>{<int*2*2>{<int*2>{1}},<int*2*2>{<int*2>{2}},<int*2*2>{<int*2>{3,4},<int*2>{5,6}},<int*2*2>{<int*2>{7,8},<int*2>{9,10}},<int*2*2>{<int*2>{11,12},<int*2>{13,14}},<int*2*2>{<int*2>{15}}}"}, //[6][2][2]
  {_I_, SET_LINE "const int autoleng_3[][2][2] = { {1,2,3},4,5,6,7,8,9,10,11,12,13,14,15 };", "<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3}},<int*2*2>{<int*2>{4,5},<int*2>{6,7}},<int*2*2>{<int*2>{8,9},<int*2>{10,11}},<int*2*2>{<int*2>{12,13},<int*2>{14,15}}}"}, //[4][2][2]
  {_I_, SET_LINE "const int autoleng_4[][2][2] = { 1,2,{3},4,5,6,7,8,9,10,11,12,13,14,15 };",      "<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3}},<int*2*2>{<int*2>{4,5},<int*2>{6,7}},<int*2*2>{<int*2>{8,9},<int*2>{10,11}},<int*2*2>{<int*2>{12,13},<int*2>{14,15}}}"}, //[4][2][2]
  {_I_, SET_LINE "const int autoleng_5[][2][2] = { 1,2,{{3}},4,5,6,7,8,9,10,11,12,13,14,15 };",    "<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3}},<int*2*2>{<int*2>{4,5},<int*2>{6,7}},<int*2*2>{<int*2>{8,9},<int*2>{10,11}},<int*2*2>{<int*2>{12,13},<int*2>{14,15}}}"}, //[4][2][2]
  {_I_, SET_LINE "const int autoleng_6[][2][2] = { 1,2,{3,4},5,6,7,8,9,10,11,12,13,14,15 };",      "<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}},<int*2*2>{<int*2>{5,6},<int*2>{7,8}},<int*2*2>{<int*2>{9,10},<int*2>{11,12}},<int*2*2>{<int*2>{13,14},<int*2>{15}}}"}, //[4][2][2]
  {_I_, SET_LINE "const int autoleng_7[][2][2] = { 1,2,{3,4},5,6,{7,8},9,10,11,12,13,14,15 };",    "<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}},<int*2*2>{<int*2>{5,6},<int*2>{7,8}},<int*2*2>{<int*2>{9,10},<int*2>{11,12}},<int*2*2>{<int*2>{13,14},<int*2>{15}}}"}, //[4][2][2]
  {_I_, SET_LINE "const int autoleng_8[][2][2] = { 1,2,{3,4},{{5,6},{7,8}},9,10,11,12,13,14,15 };","<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}},<int*2*2>{<int*2>{5,6},<int*2>{7,8}},<int*2*2>{<int*2>{9,10},<int*2>{11,12}},<int*2*2>{<int*2>{13,14},<int*2>{15}}}"}, //[4][2][2]
  {_I_, SET_LINE "const int autoleng_9[][2][2] = { 1,{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };",      "<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}},<int*2*2>{<int*2>{5,6},<int*2>{7,8}},<int*2*2>{<int*2>{9,10},<int*2>{11,12}},<int*2*2>{<int*2>{13,14},<int*2>{15}}}"}, //[4][2][2]
  {_I_, SET_LINE "const int autoleng_a[][2][2] = { 1,{{2}},3,4,5,6,7,8,9,10,11,12,13,14,15 };",    "<int*2*2*4>{<int*2*2>{<int*2>{1,2},<int*2>{3,4}},<int*2*2>{<int*2>{5,6},<int*2>{7,8}},<int*2*2>{<int*2>{9,10},<int*2>{11,12}},<int*2*2>{<int*2>{13,14},<int*2>{15}}}"}, //[4][2][2]

  // 前后列表接续
  {_I_, SET_LINE "const int nin_0[][4][4] = { {},{1,2,3,4,5,6,7,8,9} };  ", "<int*4*4*2>{<int*4*4>{<int*4>{0}},<int*4*4>{<int*4>{1,2,3,4},<int*4>{5,6,7,8},<int*4>{9}}}", "{{{$R}},{{1,2,3,4},{5,6,7,8},{9}}}"},
  {_I_, SET_LINE "const int nin_1[][4][4] = { {1,2,3,4,5,6},{7,8,9} };   ", "<int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4},<int*4>{5,6}},<int*4*4>{<int*4>{7,8,9}}}"},
  {_I_, SET_LINE "const int nin_2[][4][4] = { {1,2,3,4,5,6},{{7,8,9}} }; ", "<int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4},<int*4>{5,6}},<int*4*4>{<int*4>{7,8,9}}}"},
  {_I_, SET_LINE "const int nin_3[][4][4] = { {{1,2,3,4}},{5,6,7,8,9} }; ", "<int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4}},<int*4*4>{<int*4>{5,6,7,8},<int*4>{9}}}"},
  {_I_, SET_LINE "const int nin_4[][4][4] = { {1,2,3,4},{5,6,7,8,9} };   ", "<int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4}},<int*4*4>{<int*4>{5,6,7,8},<int*4>{9}}}"},
  {_I_, SET_LINE "const int nin_5[][4][4] = { {1,2,3,4},5,6,7,8,9 };     ", "<int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4}},<int*4*4>{<int*4>{5,6,7,8},<int*4>{9}}}"},
  {_I_, SET_LINE "const int nin_6[][4][4] = { {{1,2,3,4},5,6,7,8,9} };   ", "<int*4*4*1>{<int*4*4>{<int*4>{1,2,3,4},<int*4>{5,6,7,8},<int*4>{9}}}"},
  {_I_, SET_LINE "const int nin_7[][4][4] = { {{1,2,3,4},5},6,7,8,9 };   ", "<int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4},<int*4>{5}},<int*4*4>{<int*4>{6,7,8,9}}}"},

# define STRUCT_SAMP1  "struct STRU {  float a;  float b;  int c; }; struct STRU2 {  float f;  STRU s;  int c; };"

  {_I_, SET_LINE STRUCT_SAMP1 "const STRU2 struc0 = {1, 2, 3};", "<STRU2>{1,<STRU>{2,3}}"}, // {1.0f, {2.0f, 3.0f}}
  {_I_, SET_LINE STRUCT_SAMP1 "const STRU2 struc1 = {1, {2}, 3};", "<STRU2>{1,<STRU>{2},3}"}, // {1.0f, {2.0f}, 3}

# define D_ST_A  "struct ST_A{int a,b,c,d;}; "
  {_I_, SET_LINE D_ST_A"const ST_A a = { 2,3,4 };", "<ST_A>{2,3,4}", NULL, {"a.a", 2, "a.c", 4, "a.d", 0}},
  {_I_, SET_LINE D_ST_A"const ST_A a0 = { {2}, {3}, {4} };", "<ST_A>{2,3,4}"},
  {_I_, SET_LINE D_ST_A"const ST_A a1 = { {{2}}, {{3}}, {{4}} };", "<ST_A>{2,3,4}"},
  {_I_, SET_LINE D_ST_A"const ST_A a2 = { {{{2}}}, {{{3}}}, {{{4}}} };", "<ST_A>{2,3,4}"},
  {_I_, SET_LINE D_ST_A"const ST_A a3 = { 2, 3, 4 };", "<ST_A>{2,3,4}"},
  {_I_, SET_LINE D_ST_A"const ST_A a4 = { {2}, 3, 4 };", "<ST_A>{2,3,4}"},
  {_I_, SET_LINE D_ST_A"const ST_A a5 = { {{2}}, 3, 4 };", "<ST_A>{2,3,4}"},
  {_I_, SET_LINE D_ST_A"const ST_A a6 = { {{2}},{3},4 };", "<ST_A>{2,3,4}"},
  {_I_, SET_LINE D_ST_A"const ST_A a7 = { {2},{{3}},4 };", "<ST_A>{2,3,4}"},
  {_I_, SET_LINE D_ST_A"const ST_A a8_ = { {2},{3,4} };", "[ERROR]"},
  //{_I_, D_ST_A"const ST_A a9_ = { {},2,3,4 };", "[ERROR]"},

# define D_ST_B2  "struct ST_B2 { int a, b; }; "
# define D_ST_B3  "struct ST_B3 { int a, b, c; }; "
# define D_ST_B4  "struct ST_B4 { int a, b, c, d; }; "

  {_I_, SET_LINE D_ST_B3 "const ST_B3 b0 = { {2}, {3}, {4} };", "<ST_B3>{2,3,4}"},
  {_I_, SET_LINE D_ST_B3 "const ST_B3 b1[4] = { {2}, {3}, {4} };", "<ST_B3*4>{<ST_B3>{2},<ST_B3>{3},<ST_B3>{4}}", NULL, {"b1[0].a", 2, "b1[1].a", 3, "b1[2].a", 4, "b1[1].b", 0}},
  {_I_, SET_LINE D_ST_B2 "const ST_B2 b2[3] = { {1},2,3 };", "<ST_B2*3>{<ST_B2>{1},<ST_B2>{2,3}}"},
  {_I_, SET_LINE D_ST_B2 "const ST_B2 b3[4][3] = { {{1},2},3 };", "<ST_B2*3*4>{<ST_B2*3>{<ST_B2>{1},<ST_B2>{2}},<ST_B2*3>{<ST_B2>{3}}}", NULL, {"b3[0][0].a", 1, "b3[0][1].a", 2, "b3[1][0].a", 3, "b3[3][2].b", 0}},
  {_I_, SET_LINE D_ST_B2 "const ST_B2 b4[3] = { {1},2,{3} };", "<ST_B2*3>{<ST_B2>{1},<ST_B2>{2,3}}"},
  {_I_, SET_LINE D_ST_B2 "const ST_B2 b5[4][3] = { {1},2,{3} };", "<ST_B2*3*4>{<ST_B2*3>{<ST_B2>{1}},<ST_B2*3>{<ST_B2>{2,3}}}"},
  {_I_, SET_LINE D_ST_B2 "const ST_B2 b6[3] = { 1,{2},{3} };", "<ST_B2*3>{<ST_B2>{1,2},<ST_B2>{3}}"},
  {_I_, SET_LINE D_ST_B3 "const ST_B3 b7[4] = { 2, 3, 4 };", "<ST_B3*4>{<ST_B3>{2,3,4}}"},
  {_I_, SET_LINE D_ST_B4 "const ST_B4 b8[6] = { {1,2,3}, {4,5,6}, {7,8,9} };", "<ST_B4*6>{<ST_B4>{1,2,3},<ST_B4>{4,5,6},<ST_B4>{7,8,9}}"},

    // 饱和列表，列表储存达到上限的元素
# define D1_ST2 "struct ST_2{int a, b;}; "
# define D1_ST2_2  D1_ST2 "struct ST_2_2 { ST_2 a, b; }; "

  {_I_, SET_LINE D1_ST2 "const ST_2 q2_1[2][2][2] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2},<ST_2>{3,4}},<ST_2*2>{<ST_2>{5,6},<ST_2>{7,8}}},<ST_2*2*2>{<ST_2*2>{<ST_2>{9,10},<ST_2>{11,12}},<ST_2*2>{<ST_2>{13,14},<ST_2>{15,16}}}}"},
  {_I_, SET_LINE D1_ST2 "const ST_2 q2_2[2][2][2] = { {1,2,3,4,5,6,7,8} };", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2},<ST_2>{3,4}},<ST_2*2>{<ST_2>{5,6},<ST_2>{7,8}}}}"},
  {_I_, SET_LINE D1_ST2 "const ST_2 q2_3[2][2][2] = { {{1,2,3,4}} };  ", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2},<ST_2>{3,4}}}}"},
  {_I_, SET_LINE D1_ST2 "const ST_2 q2_4[2][2][2] = { {{{1,2}}} };    ", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2}}}}"},
  {_I_, SET_LINE D1_ST2 "const ST_2 q2_5[2][2][2] = { {{{{1},{2}}}} };", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2}}}}"},

  {_I_, SET_LINE D1_ST2_2 "const ST_2_2 q2_2_1[2][2] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2},<ST_2>{3,4}},<ST_2_2>{<ST_2>{5,6},<ST_2>{7,8}}},<ST_2_2*2>{<ST_2_2>{<ST_2>{9,10},<ST_2>{11,12}},<ST_2_2>{<ST_2>{13,14},<ST_2>{15,16}}}}"},
  {_I_, SET_LINE D1_ST2_2 "const ST_2_2 q2_2_2[2][2] = { {1,2,3,4,5,6,7,8} };", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2},<ST_2>{3,4}},<ST_2_2>{<ST_2>{5,6},<ST_2>{7,8}}}}"},
  {_I_, SET_LINE D1_ST2_2 "const ST_2_2 q2_2_3[2][2] = { {{1,2,3,4}} };  ", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2},<ST_2>{3,4}}}}"},
  {_I_, SET_LINE D1_ST2_2 "const ST_2_2 q2_2_4[2][2] = { {{{1,2}}} };    ", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2}}}}"},
  {_I_, SET_LINE D1_ST2_2 "const ST_2_2 q2_2_5[2][2] = { {{{{1},{2}}}} };", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2}}}}"},

#define D_ST9  "struct ST_9 { int a, b, c, d, e, f, g, h, i; }; "
#define D_ST6_9  D_ST9 "struct ST_6_9 { ST_9 a, b, c, d, e, f; }; "
#define D_ST3_6_9  D_ST6_9 "struct ST_3_6_9 { ST_6_9 a, b, c; }; "

  {_I_, SET_LINE D_ST9 "const ST_9 tr1[3][6] = { 1,2,3,4,5,6,7,8,9 };                         // ", "<ST_9*6*3>{<ST_9*6>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST9 "const ST_9 tr2[3][6] = { { 1,2,3,4,5,6,7,8,9 } };                     // ", "<ST_9*6*3>{<ST_9*6>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST9 "const ST_9 tr3[3][6] = { {{ 1,2,3,4,5,6,7,8,9 }} };                   // ", "<ST_9*6*3>{<ST_9*6>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST9 "const ST_9 tr4[3][6] = { {{ {1},{2},{3},{4},{5},{6},{7},{8},{9} }} }; // ", "<ST_9*6*3>{<ST_9*6>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST9 "const ST_9 tr5_[3][6] = {{{ {{1},{2},{3},{4},{5},{6},{7},{8},{9}} }}};//", "[ERROR]"},

  {_I_, SET_LINE D_ST6_9 "const ST_6_9 tr1_6[3] = { 1,2,3,4,5,6,7,8,9 };                         // ", "<ST_6_9*3>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST6_9 "const ST_6_9 tr2_6[3] = { { 1,2,3,4,5,6,7,8,9 } };                     // ", "<ST_6_9*3>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST6_9 "const ST_6_9 tr3_6[3] = { {{ 1,2,3,4,5,6,7,8,9 }} };                   // ", "<ST_6_9*3>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST6_9 "const ST_6_9 tr4_6[3] = { {{ {1},{2},{3},{4},{5},{6},{7},{8},{9} }} }; // ", "<ST_6_9*3>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST6_9 "const ST_6_9 tr5_6_[3] = {{{ {{1},{2},{3},{4},{5},{6},{7},{8},{9}} }}};//", "[ERROR]"},

  {_I_, SET_LINE D_ST3_6_9 "const ST_3_6_9 tr1_3_6 = { 1,2,3,4,5,6,7,8,9 };                         // ", "<ST_3_6_9>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST3_6_9 "const ST_3_6_9 tr2_3_6 = { { 1,2,3,4,5,6,7,8,9 } };                     // ", "<ST_3_6_9>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST3_6_9 "const ST_3_6_9 tr3_3_6 = { {{ 1,2,3,4,5,6,7,8,9 }} };                   // ", "<ST_3_6_9>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST3_6_9 "const ST_3_6_9 tr4_3_6 = { {{ {1},{2},{3},{4},{5},{6},{7},{8},{9} }} }; // ", "<ST_3_6_9>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
  {_I_, SET_LINE D_ST3_6_9 "const ST_3_6_9 tr5_3_6_ = {{{ {{1},{2},{3},{4},{5},{6},{7},{8},{9}} }}};//", "[ERROR]"},

# define D_STU_4  "struct STU_4 { int a, b, c, d; }; "
  {_I_, SET_LINE D_STU_4 "const STU_4 qu1[3][9] = { { 1,2,3,4,5,6,7,8,9 } }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 qu2[3][9] = { { 1,2,3,4,5,6},{7,8,9} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6}},<STU_4*9>{<STU_4>{7,8,9}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 qu3[3][9] = { { {1},{2},{3},{4},{5},{6},{7},{8},{9} } }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1},<STU_4>{2},<STU_4>{3},<STU_4>{4},<STU_4>{5},<STU_4>{6},<STU_4>{7},<STU_4>{8},<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 qu4[3][9] = { { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} } }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1},<STU_4>{2},<STU_4>{3},<STU_4>{4},<STU_4>{5},<STU_4>{6},<STU_4>{7},<STU_4>{8},<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 qu5[3][9] = { {1},{2},{3} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1}},<STU_4*9>{<STU_4>{2}},<STU_4*9>{<STU_4>{3}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 qu6[3][9] = { {{1}},{{2}},{{3}} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1}},<STU_4*9>{<STU_4>{2}},<STU_4*9>{<STU_4>{3}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 qu7[3][2] = { {1,2,3,4,5,6,7,8},{11,12,13,14,15,16,17,18},{21,22,23,24,25,26,27,28} }; // ","<STU_4*2*3>{<STU_4*2>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8}},<STU_4*2>{<STU_4>{11,12,13,14},<STU_4>{15,16,17,18}},<STU_4*2>{<STU_4>{21,22,23,24},<STU_4>{25,26,27,28}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 nn1[9][6] = { 1,2,3,4,5,6,7,8,9 }; // ","<STU_4*6*9>{<STU_4*6>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 nn2[9][6] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} }; // ","<STU_4*6*9>{<STU_4*6>{<STU_4>{1}},<STU_4*6>{<STU_4>{2}},<STU_4*6>{<STU_4>{3}},<STU_4*6>{<STU_4>{4}},<STU_4*6>{<STU_4>{5}},<STU_4*6>{<STU_4>{6}},<STU_4*6>{<STU_4>{7}},<STU_4*6>{<STU_4>{8}},<STU_4*6>{<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 nn3[9][6] = { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} }; // ","<STU_4*6*9>{<STU_4*6>{<STU_4>{1}},<STU_4*6>{<STU_4>{2}},<STU_4*6>{<STU_4>{3}},<STU_4*6>{<STU_4>{4}},<STU_4*6>{<STU_4>{5}},<STU_4*6>{<STU_4>{6}},<STU_4*6>{<STU_4>{7}},<STU_4*6>{<STU_4>{8}},<STU_4*6>{<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU_4 "const STU_4 nn4[9][6] = { {{{1}}},{{{2}}},{{{3}}},{{{4}}},{{{5}}},{{{6}}},{{{{7}}}},{{{8}}},{{{9}}} }; // ","<STU_4*6*9>{<STU_4*6>{<STU_4>{1}},<STU_4*6>{<STU_4>{2}},<STU_4*6>{<STU_4>{3}},<STU_4*6>{<STU_4>{4}},<STU_4*6>{<STU_4>{5}},<STU_4*6>{<STU_4>{6}},<STU_4*6>{<STU_4>{7}},<STU_4*6>{<STU_4>{8}},<STU_4*6>{<STU_4>{9}}}"},

# define D_STU_4  "struct STU_4 { int a, b, c, d; }; "
# define D_STU_2_4 D_STU_4 "struct STU_2_4 { STU_4 a[2]; }; "
# define D_STU_6_4 D_STU_4 "struct STU_6_4 { STU_4 a[6]; }; "
# define D_STU_9_4 D_STU_4 "struct STU_9_4 { STU_4 a[9]; }; "

  {_I_, SET_LINE D_STU_9_4 "const STU_9_4 qu1[3] = { { 1,2,3,4,5,6,7,8,9 } }; // ","<STU_9_4*3>{<STU_9_4>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}}" },
  {_I_, SET_LINE D_STU_9_4 "const STU_9_4 qu2[3] = { { 1,2,3,4,5,6},{7,8,9 } }; // ","<STU_9_4*3>{<STU_9_4>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6}}},<STU_9_4>{<STU_4*9>{<STU_4>{7,8,9}}}}" },
  {_I_, SET_LINE D_STU_9_4 "const STU_9_4 qu3_[3] = { { {1},{2},{3},{4},{5},{6},{7},{8},{9} } }; // ","[ERROR]" },
  {_I_, SET_LINE D_STU_9_4 "const STU_9_4 qu4_[3] = { { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} } }; // ","[ERROR]" },
  {_I_, SET_LINE D_STU_9_4 "const STU_9_4 qu5[3] = { {1},{2},{3} }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4*9>{<STU_4>{1}}},<STU_9_4>{<STU_4*9>{<STU_4>{2}}},<STU_9_4>{<STU_4*9>{<STU_4>{3}}}}" },
  {_I_, SET_LINE D_STU_9_4 "const STU_9_4 qu6[3] = { {{1}},{{2}},{{3}} }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4*9>{<STU_4>{1}}},<STU_9_4>{<STU_4*9>{<STU_4>{2}}},<STU_9_4>{<STU_4*9>{<STU_4>{3}}}}" },
  {_I_, SET_LINE D_STU_2_4 "const STU_2_4 qu7[3] = { {1,2,3,4,5,6,7,8},{11,12,13,14,15,16,17,18},{21,22,23,24,25,26,27,28} }; // ", "<STU_2_4*3>{<STU_2_4>{<STU_4*2>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8}}},<STU_2_4>{<STU_4*2>{<STU_4>{11,12,13,14},<STU_4>{15,16,17,18}}},<STU_2_4>{<STU_4*2>{<STU_4>{21,22,23,24},<STU_4>{25,26,27,28}}}}", NULL, {"qu7[0].a[0].a", 1}},
  {_I_, SET_LINE D_STU_6_4 "const STU_6_4 nn1[9] = { 1,2,3,4,5,6,7,8,9 }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4*6>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}}" },
  {_I_, SET_LINE D_STU_6_4 "const STU_6_4 nn2[9] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4*6>{<STU_4>{1}}},<STU_6_4>{<STU_4*6>{<STU_4>{2}}},<STU_6_4>{<STU_4*6>{<STU_4>{3}}},<STU_6_4>{<STU_4*6>{<STU_4>{4}}},<STU_6_4>{<STU_4*6>{<STU_4>{5}}},<STU_6_4>{<STU_4*6>{<STU_4>{6}}},<STU_6_4>{<STU_4*6>{<STU_4>{7}}},<STU_6_4>{<STU_4*6>{<STU_4>{8}}},<STU_6_4>{<STU_4*6>{<STU_4>{9}}}}" },
  {_I_, SET_LINE D_STU_6_4 "const STU_6_4 nn3[9] = { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4*6>{<STU_4>{1}}},<STU_6_4>{<STU_4*6>{<STU_4>{2}}},<STU_6_4>{<STU_4*6>{<STU_4>{3}}},<STU_6_4>{<STU_4*6>{<STU_4>{4}}},<STU_6_4>{<STU_4*6>{<STU_4>{5}}},<STU_6_4>{<STU_4*6>{<STU_4>{6}}},<STU_6_4>{<STU_4*6>{<STU_4>{7}}},<STU_6_4>{<STU_4*6>{<STU_4>{8}}},<STU_6_4>{<STU_4*6>{<STU_4>{9}}}}" },
  {_I_, SET_LINE D_STU_6_4 "const STU_6_4 nn4[9] = { {{{1}}},{{{2}}},{{{3}}},{{{4}}},{{{5}}},{{{6}}},{{{{7}}}},{{{8}}},{{{9}}} }; // ","<STU_6_4*9>{<STU_6_4>{<STU_4*6>{<STU_4>{1}}},<STU_6_4>{<STU_4*6>{<STU_4>{2}}},<STU_6_4>{<STU_4*6>{<STU_4>{3}}},<STU_6_4>{<STU_4*6>{<STU_4>{4}}},<STU_6_4>{<STU_4*6>{<STU_4>{5}}},<STU_6_4>{<STU_4*6>{<STU_4>{6}}},<STU_6_4>{<STU_4*6>{<STU_4>{7}}},<STU_6_4>{<STU_4*6>{<STU_4>{8}}},<STU_6_4>{<STU_4*6>{<STU_4>{9}}}}" },

# define D_STU4  "struct STU_4 { int a, b, c, d; }; "
# define D_STU2_4  D_STU4 "struct STU_2_4 { STU_4 a, b; }; "
# define D_STU6_4  D_STU4 "struct STU_6_4 { STU_4 a, b, c, d, e, f; }; "
# define D_STU9_4  D_STU4 "struct STU_9_4 { STU_4 a, b, c, d, e, f, g, h, i; }; "

  {_I_, SET_LINE D_STU9_4 "const STU_9_4 qu1[3] = { { 1,2,3,4,5,6,7,8,9 } }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU9_4 "const STU_9_4 qu2[3] = {{1,2,3,4,5,6},{7,8,9}}; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1,2,3,4},<STU_4>{5,6}},<STU_9_4>{<STU_4>{7,8,9}}}"},
  {_I_, SET_LINE D_STU9_4 "const STU_9_4 qu3[3] = { { {1},{2},{3},{4},{5},{6},{7},{8},{9} } }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1},<STU_4>{2},<STU_4>{3},<STU_4>{4},<STU_4>{5},<STU_4>{6},<STU_4>{7},<STU_4>{8},<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU9_4 "const STU_9_4 qu4[3] = { { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} } }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1},<STU_4>{2},<STU_4>{3},<STU_4>{4},<STU_4>{5},<STU_4>{6},<STU_4>{7},<STU_4>{8},<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU9_4 "const STU_9_4 qu5[3] = { {1},{2},{3} }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1}},<STU_9_4>{<STU_4>{2}},<STU_9_4>{<STU_4>{3}}}"},
  {_I_, SET_LINE D_STU9_4 "const STU_9_4 qu6[3] = { {{1}},{{2}},{{3}} }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1}},<STU_9_4>{<STU_4>{2}},<STU_9_4>{<STU_4>{3}}}"},
  {_I_, SET_LINE D_STU2_4 "const STU_2_4 qu7[3] = { {1,2,3,4,5,6,7,8},{11,12,13,14,15,16,17,18},{21,22,23,24,25,26,27,28} }; // ", "<STU_2_4*3>{<STU_2_4>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8}},<STU_2_4>{<STU_4>{11,12,13,14},<STU_4>{15,16,17,18}},<STU_2_4>{<STU_4>{21,22,23,24},<STU_4>{25,26,27,28}}}"},
  {_I_, SET_LINE D_STU6_4 "const STU_6_4 nn1[9] = { 1,2,3,4,5,6,7,8,9 }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU6_4 "const STU_6_4 nn2[9] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4>{1}},<STU_6_4>{<STU_4>{2}},<STU_6_4>{<STU_4>{3}},<STU_6_4>{<STU_4>{4}},<STU_6_4>{<STU_4>{5}},<STU_6_4>{<STU_4>{6}},<STU_6_4>{<STU_4>{7}},<STU_6_4>{<STU_4>{8}},<STU_6_4>{<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU6_4 "const STU_6_4 nn3[9] = { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4>{1}},<STU_6_4>{<STU_4>{2}},<STU_6_4>{<STU_4>{3}},<STU_6_4>{<STU_4>{4}},<STU_6_4>{<STU_4>{5}},<STU_6_4>{<STU_4>{6}},<STU_6_4>{<STU_4>{7}},<STU_6_4>{<STU_4>{8}},<STU_6_4>{<STU_4>{9}}}"},
  {_I_, SET_LINE D_STU6_4 "const STU_6_4 nn4[9] = { {{{1}}},{{{2}}},{{{3}}},{{{4}}},{{{5}}},{{{6}}},{{{{7}}}},{{{8}}},{{{9}}} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4>{1}},<STU_6_4>{<STU_4>{2}},<STU_6_4>{<STU_4>{3}},<STU_6_4>{<STU_4>{4}},<STU_6_4>{<STU_4>{5}},<STU_6_4>{<STU_4>{6}},<STU_6_4>{<STU_4>{7}},<STU_6_4>{<STU_4>{8}},<STU_6_4>{<STU_4>{9}}}"},

# define D_ST_2  "struct ST_2 { int a[2]; };"
# define D_ST_3  "struct ST_3 { int a[3]; };"
# define D_ST_6  "struct ST_6 { int a[6]; };"
# define D_ST_9  "struct ST_9 { int a[9]; };"

  {_I_, SET_LINE D_ST_9 "const ST_9 g1_[6] = { { {1},{2},{3}, {4},{5},{6}, {7},{8},{9} } }; // ", "[ERROR]"},
  {_I_, SET_LINE D_ST_9 "const ST_9 h3[6] = { {2,3,6, 2,4,3, 2,4,3} }; // ", "<ST_9*6>{<ST_9>{<int*9>{2,3,6,2,4,3,2,4,3}}}", NULL, {"h3[0].a[0]", 2}},
  {_I_, SET_LINE D_ST_6 "const ST_6 g0[9] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} }; // ", "<ST_6*9>{<ST_6>{<int*6>{1}},<ST_6>{<int*6>{2}},<ST_6>{<int*6>{3}},<ST_6>{<int*6>{4}},<ST_6>{<int*6>{5}},<ST_6>{<int*6>{6}},<ST_6>{<int*6>{7}},<ST_6>{<int*6>{8}},<ST_6>{<int*6>{9}}}"},
  
  {_I_, SET_LINE D_ST_9 "const ST_9 h4[9][9] = { {2,{3},4,5,6,7,8,9,10,11} }; // ", "<ST_9*9*9>{<ST_9*9>{<ST_9>{<int*9>{2,3,4,5,6,7,8,9,10}},<ST_9>{<int*9>{11}}}}"},
  {_I_, SET_LINE D_ST_9 "const ST_9 h4b[9][9] = { 2,{3},4,5,6,7,8,9,10,11 };  // ", "<ST_9*9*9>{<ST_9*9>{<ST_9>{<int*9>{2,3,4,5,6,7,8,9,10}},<ST_9>{<int*9>{11}}}}"},
  {_I_, SET_LINE D_ST_9 "const ST_9 h4c_[9][9] = { 2,{3,0},4,5,6,7,8,9,10,11 }; // ", "[ERROR]"},
  {_I_, SET_LINE D_ST_9 "const ST_9 h5[9][9] = { {2,{{{{{3}}}}},4,5,6,7,8,9,10,11} }; // ", "<ST_9*9*9>{<ST_9*9>{<ST_9>{<int*9>{2,3,4,5,6,7,8,9,10}},<ST_9>{<int*9>{11}}}}"},
  {_I_, SET_LINE D_ST_9 "const ST_9 h5a[9][9] = { {{{2}},{{{{{3}}}}},4,5,6,7,8,9,10,11} }; // ", "<ST_9*9*9>{<ST_9*9>{<ST_9>{<int*9>{2}},<ST_9>{<int*9>{3}},<ST_9>{<int*9>{4,5,6,7,8,9,10,11}}}}"},
  {_I_, SET_LINE D_ST_2 "const ST_2 h6[4] = { 0, 5, {1, 3}, 0, 2, 4 }; // ", "<ST_2*4>{<ST_2>{<int*2>{0,5}},<ST_2>{<int*2>{1,3}},<ST_2>{<int*2>{0,2}},<ST_2>{<int*2>{4}}}"},
  {_I_, SET_LINE D_ST_2 "const ST_2 h7[4] = { 0, 5, {1}, 0, 2, 4 }; // ", "<ST_2*4>{<ST_2>{<int*2>{0,5}},<ST_2>{<int*2>{1}},<ST_2>{<int*2>{0,2}},<ST_2>{<int*2>{4}}}"},
  {_I_, SET_LINE D_ST_3 "const ST_3 h8[4] = { 0, 5, {1}, 0, 2, 4 }; // ", "<ST_3*4>{<ST_3>{<int*3>{0,5,1}},<ST_3>{<int*3>{0,2,4}}}"},

# define D_ST3   "struct ST3 { int a[3]; };"
  {_I_, SET_LINE D_ST3 "const ST3 grou0[3][3] = { {0},{5},{6} }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{0}}},<ST3*3>{<ST3>{<int*3>{5}}},<ST3*3>{<ST3>{<int*3>{6}}}}"},
  {_I_, SET_LINE D_ST3 "const ST3 grou1[3][3] = { {0,1,2},{5},{6} }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{0,1,2}}},<ST3*3>{<ST3>{<int*3>{5}}},<ST3*3>{<ST3>{<int*3>{6}}}}"},
  {_I_, SET_LINE D_ST3 "const ST3 grou2[3][3] = { {1}, 2, 3, 4, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1}}},<ST3*3>{<ST3>{<int*3>{2,3,4}},<ST3>{<int*3>{5,6,7}},<ST3>{<int*3>{8}}}}"},
  {_I_, SET_LINE D_ST3 "const ST3 grou3[3][3] = { 1, {2}, 3, 4, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}"},
  {_I_, SET_LINE D_ST3 "const ST3 grou4[3][3] = { 1, 2, {3}, 4, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}"},
  {_I_, SET_LINE D_ST3 "const ST3 grou5_[3][3] = { 1, {2, 3}, 4, 5, 6, 7, 8 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3 "const ST3 grou6_[3][3] = { 1, {{2}, 3}, 4, 5, 6, 7, 8 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3 "const ST3 grou7[3][3] = { 1, 2, 3, {4}, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4}},<ST3>{<int*3>{5,6,7}}},<ST3*3>{<ST3>{<int*3>{8}}}}"},
  {_I_, SET_LINE D_ST3 "const ST3 grou8[3][3] = { {1, 2, 3}, 4, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}}},<ST3*3>{<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}"},
  {_I_, SET_LINE D_ST3 "const ST3 grou9_[2][3] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3 "const ST3 grou10_[3][3] = { 1,{2,3},4,5,6,7,8,9 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3 "const ST3 grou11_[3][3] = { 1,{2,3,4},5,6,7,8,9 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3 "const ST3 grou12_[3][3] = { 1,{2,{}},3,4,5,6,7,8,9 }; //", "[ERROR]"}, // C2078
  {_I_, SET_LINE D_ST3 "const ST3 grou13[3][3] = { 1,{2,},3,4,5,6,7,8,9 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8,9}}}}"},
  {_I_, SET_LINE D_ST3 "const ST3 grou14_[3][3] = { 1,{,2},3,4,5,6,7,8,9 }; //", "[ERROR]"},

# define D_ST3   "struct ST3 { int a[3]; };"
# define D_ST3x3 D_ST3 "struct ST3x3 { ST3 a[3]; };"
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou0[3] = { {0},{5},{6} }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{0}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{5}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{6}}}}}"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou1[3] = { {0,1,2},{5},{6} }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{0,1,2}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{5}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{6}}}}}"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou2[3] = { {1}, 2, 3, 4, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{2,3,4}},<ST3>{<int*3>{5,6,7}},<ST3>{<int*3>{8}}}}}"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou3[3] = { 1, {2}, 3, 4, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}}"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou4[3] = { 1, 2, {3}, 4, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}}"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou5_[3] = { 1, {2, 3}, 4, 5, 6, 7, 8 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou6_[3] = { 1, {{2}, 3}, 4, 5, 6, 7, 8 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou7[3] = { 1, 2, 3, {4}, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4}},<ST3>{<int*3>{5,6,7}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{8}}}}}"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou8[3] = { {1, 2, 3}, 4, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}}"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou9_[2] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou10_[3] = { 1,{2,3},4,5,6,7,8,9 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou11_[3] = { 1,{2,3,4},5,6,7,8,9 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou12_[3] = { 1,{2,{}},3,4,5,6,7,8,9 }; //", "[ERROR]"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou13[3] = { 1,{2,},3,4,5,6,7,8,9 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8,9}}}}}"},
  {_I_, SET_LINE D_ST3x3 "const ST3x3 grou14_[3] = { 1,{,2},3,4,5,6,7,8,9 }; //", "[ERROR]"},

#define D_ST2x2x4  "struct ST2 { int a[2]; };  struct ST2x2 { ST2 a[2]; };  struct ST2x2x4 { ST2x2 a[4]; };"
  {_I_, SET_LINE D_ST2x2x4 "const ST2x2x4 arr_9 = { 1,{2},3,4,5,6,7,8,9,10,11,12,13,14,15 }; // ", "<ST2x2x4>{<ST2x2*4>{<ST2x2>{<ST2*2>{<ST2>{<int*2>{1,2}},<ST2>{<int*2>{3,4}}}},<ST2x2>{<ST2*2>{<ST2>{<int*2>{5,6}},<ST2>{<int*2>{7,8}}}},<ST2x2>{<ST2*2>{<ST2>{<int*2>{9,10}},<ST2>{<int*2>{11,12}}}},<ST2x2>{<ST2*2>{<ST2>{<int*2>{13,14}},<ST2>{<int*2>{15}}}}}}"},

# define D_ST2 "struct ST2{int a, b;};"
# define D_ST2x2  D_ST2"struct ST2x2 { ST2 a, b; };"

  // 测试自适应长度
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_0_[3][] = { 2,3,4 }; // ", "[ERROR]"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_00[] = { 2,3,4 }; // ", "<ST2*2>{<ST2>{2,3},<ST2>{4}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_01[] = { {2},{3},{4} }; // ", "<ST2*3>{<ST2>{2},<ST2>{3},<ST2>{4}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_02[] = { {2},3,4 }; // ", "<ST2*2>{<ST2>{2},<ST2>{3,4}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_03[] = { {2,3},4 }; // ", "<ST2*2>{<ST2>{2,3},<ST2>{4}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_04[] = { 2,{3},4 }; // ", "<ST2*2>{<ST2>{2,3},<ST2>{4}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_0[][2] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 };         // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_1[][2] = { {1},2,3,4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*5>{<ST2*2>{<ST2>{1}},<ST2*2>{<ST2>{2,3},<ST2>{4,5}},<ST2*2>{<ST2>{6,7},<ST2>{8,9}},<ST2*2>{<ST2>{10,11},<ST2>{12,13}},<ST2*2>{<ST2>{14,15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_2[][2] = { {1},{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2*2*6>{<ST2*2>{<ST2>{1}},<ST2*2>{<ST2>{2}},<ST2*2>{<ST2>{3,4},<ST2>{5,6}},<ST2*2>{<ST2>{7,8},<ST2>{9,10}},<ST2*2>{<ST2>{11,12},<ST2>{13,14}},<ST2*2>{<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_3[][2] = { {1,2,3},4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3}},<ST2*2>{<ST2>{4,5},<ST2>{6,7}},<ST2*2>{<ST2>{8,9},<ST2>{10,11}},<ST2*2>{<ST2>{12,13},<ST2>{14,15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_4[][2] = { 1,2,{3},4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3}},<ST2*2>{<ST2>{4,5},<ST2>{6,7}},<ST2*2>{<ST2>{8,9},<ST2>{10,11}},<ST2*2>{<ST2>{12,13},<ST2>{14,15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_5[][2] = { 1,2,{{3}},4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3}},<ST2*2>{<ST2>{4,5},<ST2>{6,7}},<ST2*2>{<ST2>{8,9},<ST2>{10,11}},<ST2*2>{<ST2>{12,13},<ST2>{14,15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_6[][2] = { 1,2,{3,4},5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_7[][2] = { 1,2,{3,4},5,6,{7,8},9,10,11,12,13,14,15 };     // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_8[][2] = { 1,2,{3,4},{{5,6},{7,8}},9,10,11,12,13,14,15 }; // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_9[][2] = { 1,{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2 "const ST2 autoleng_a[][2] = { 1,{{2}},3,4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
  
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_0[] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 };         // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_1[] = { {1},2,3,4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*5>{<ST2x2>{<ST2>{1}},<ST2x2>{<ST2>{2,3},<ST2>{4,5}},<ST2x2>{<ST2>{6,7},<ST2>{8,9}},<ST2x2>{<ST2>{10,11},<ST2>{12,13}},<ST2x2>{<ST2>{14,15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_2[] = { {1},{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2x2*6>{<ST2x2>{<ST2>{1}},<ST2x2>{<ST2>{2}},<ST2x2>{<ST2>{3,4},<ST2>{5,6}},<ST2x2>{<ST2>{7,8},<ST2>{9,10}},<ST2x2>{<ST2>{11,12},<ST2>{13,14}},<ST2x2>{<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_3[] = { {1,2,3},4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3}},<ST2x2>{<ST2>{4,5},<ST2>{6,7}},<ST2x2>{<ST2>{8,9},<ST2>{10,11}},<ST2x2>{<ST2>{12,13},<ST2>{14,15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_4[] = { 1,2,{3},4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3}},<ST2x2>{<ST2>{4,5},<ST2>{6,7}},<ST2x2>{<ST2>{8,9},<ST2>{10,11}},<ST2x2>{<ST2>{12,13},<ST2>{14,15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_5[] = { 1,2,{{3}},4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3}},<ST2x2>{<ST2>{4,5},<ST2>{6,7}},<ST2x2>{<ST2>{8,9},<ST2>{10,11}},<ST2x2>{<ST2>{12,13},<ST2>{14,15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_6[] = { 1,2,{3,4},5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_7[] = { 1,2,{3,4},5,6,{7,8},9,10,11,12,13,14,15 };     // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_8[] = { 1,2,{3,4},{{5,6},{7,8}},9,10,11,12,13,14,15 }; // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_9[] = { 1,{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
  {_I_, SET_LINE D_ST2x2 "const ST2x2 autoleng_a[] = { 1,{{2}},3,4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},

# define D_ST4 "struct ST4 { int a, b, c, d; };"
  {_I_, SET_LINE D_ST4"const ST4 nin_0[][4] = { {},{1,2,3,4,5,6,7,8,9} };  // ", "<ST4*4*2>{<ST4*4>{<ST4>{0}},<ST4*4>{<ST4>{1,2,3,4},<ST4>{5,6,7,8},<ST4>{9}}}", "{{{$R}},{{1,2,3,4},{5,6,7,8},{9}}}"},
  {_I_, SET_LINE D_ST4"const ST4 nin_1[][4] = { {1,2,3,4,5,6},{7,8,9} };   // ", "<ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4},<ST4>{5,6}},<ST4*4>{<ST4>{7,8,9}}}"},
  {_I_, SET_LINE D_ST4"const ST4 nin_2[][4] = { {1,2,3,4,5,6},{{7,8,9}} }; // ", "<ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4},<ST4>{5,6}},<ST4*4>{<ST4>{7,8,9}}}"},
  {_I_, SET_LINE D_ST4"const ST4 nin_3[][4] = { {{1,2,3,4}},{5,6,7,8,9} }; // ", "<ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4}},<ST4*4>{<ST4>{5,6,7,8},<ST4>{9}}}"},
  {_I_, SET_LINE D_ST4"const ST4 nin_4[][4] = { {1,2,3,4},{5,6,7,8,9} };   // ", "<ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4}},<ST4*4>{<ST4>{5,6,7,8},<ST4>{9}}}"},
  {_I_, SET_LINE D_ST4"const ST4 nin_5[][4] = { {1,2,3,4},5,6,7,8,9 };     // ", "<ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4}},<ST4*4>{<ST4>{5,6,7,8},<ST4>{9}}}"},
  {_I_, SET_LINE D_ST4"const ST4 nin_6[][4] = { {{1,2,3,4},5,6,7,8,9} };   // ", "<ST4*4*1>{<ST4*4>{<ST4>{1,2,3,4},<ST4>{5,6,7,8},<ST4>{9}}}"},
  {_I_, SET_LINE D_ST4"const ST4 nin_7[][4] = { {{1,2,3,4},5},6,7,8,9 };   // ", "<ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4},<ST4>{5}},<ST4*4>{<ST4>{6,7,8,9}}}"},

# define D_STRU  "struct STRU { float a, b; int c; };"
# define D_STRU2 D_STRU "struct STRU2 { float f; STRU s; int c; };"

  {_I_, SET_LINE D_STRU "const STRU stru0={ 1, 2, 3 };          //", "<STRU>{1,2,3}"},
  {_I_, SET_LINE D_STRU "const STRU stru1={ {1},{2},{3} };      //", "<STRU>{1,2,3}"},
  {_I_, SET_LINE D_STRU "const STRU stru2[]={1, 2, 3 };          //", "<STRU*1>{<STRU>{1,2,3}}"},
  {_I_, SET_LINE D_STRU "const STRU stru3[]={{1}, 2, 3 };       //", "<STRU*2>{<STRU>{1},<STRU>{2,3}}"},
  {_I_, SET_LINE D_STRU "const STRU stru4[]={{1}, {2}, 3 };     //", "<STRU*3>{<STRU>{1},<STRU>{2},<STRU>{3}}"},
  {_I_, SET_LINE D_STRU "const STRU stru5[]={{1}, {2}, {3} };   //", "<STRU*3>{<STRU>{1},<STRU>{2},<STRU>{3}}"},
  {_I_, SET_LINE D_STRU "const STRU stru6[]={{{1}},{{1}},{{0}}};//", "<STRU*3>{<STRU>{1},<STRU>{1},<STRU>{0}}"},
  {_I_, SET_LINE D_STRU2 "const STRU2 struc0 = { 1, 2, 3 };     //", "<STRU2>{1,<STRU>{2,3}}"},
  {_I_, SET_LINE D_STRU2 "const STRU2 struc1 = { 1, {2}, 3 };   //", "<STRU2>{1,<STRU>{2},3}"},
  {_I_, SET_LINE D_STRU2 "const STRU2 struc2[] = { 1, 2, 3 };   //", "<STRU2*1>{<STRU2>{1,<STRU>{2,3}}}"},
  {_I_, SET_LINE D_STRU2 "const STRU2 struc3[] = { 1, {2}, 3 }; //", "<STRU2*1>{<STRU2>{1,<STRU>{2},3}}"},

#define D_SPHERE_V3 "struct V3{ float x,y,z; }; struct SPHERE{V3 pos; float radius; };"
  {_I_, SET_LINE D_SPHERE_V3 "const SPHERE v3s0 = {1,2,3,4};", "<SPHERE>{<V3>{1,2,3},4}"},

#define D_SPHERE "struct SPHERE{float3 pos; float radius; };"
  {_I_, SET_LINE D_SPHERE "const SPHERE s0 = {1,2,3,4};", "<SPHERE>{<float3>{1,2,3},4}"},
  {_I_, SET_LINE D_SPHERE "const SPHERE s1 = {{1,2,3}, 4};", "<SPHERE>{<float3>{1,2,3},4}"},
  {_I_, SET_LINE D_SPHERE "const SPHERE s2 = {float3(1,2,3), 4};", "<SPHERE>{<float3>{1.000,2.000,3.000},4}","{{$R,$R,$R},4}"},
  { _I_, SET_LINE D_SPHERE "const SPHERE s3[] = {{1,2,3,4},{1,2,3,4},{1,2,3,4}};", },
  { _I_, SET_LINE D_SPHERE "const SPHERE s4_0[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};", "<SPHERE*5>{<SPHERE>{<float3>{1,2,3},4},<SPHERE>{<float3>{5,6,7},8},<SPHERE>{<float3>{9,10,11},12},<SPHERE>{<float3>{13,14,15},16},<SPHERE>{<float3>{17,18,19},20}}","{{{1,2,3},4},{{5,6,7},8},{{9,10,11},12},{{13,14,15},16},{{17,18,19},20}}" },
  { _I_, SET_LINE D_SPHERE "const SPHERE s4_1[] = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16},{17,18,19,20}};", "<SPHERE*5>{<SPHERE>{<float3>{1,2,3},4},<SPHERE>{<float3>{5,6,7},8},<SPHERE>{<float3>{9,10,11},12},<SPHERE>{<float3>{13,14,15},16},<SPHERE>{<float3>{17,18,19},20}}","{{{1,2,3},4},{{5,6,7},8},{{9,10,11},12},{{13,14,15},16},{{17,18,19},20}}" },
  { _I_, SET_LINE D_SPHERE "const SPHERE s4_2[] = {{{1,2,3},4},{{5,6,7},8},{{9,10,11},12},{{13,14,15},16},{{17,18,19},20}};", "<SPHERE*5>{<SPHERE>{<float3>{1,2,3},4},<SPHERE>{<float3>{5,6,7},8},<SPHERE>{<float3>{9,10,11},12},<SPHERE>{<float3>{13,14,15},16},<SPHERE>{<float3>{17,18,19},20}}","{{{1,2,3},4},{{5,6,7},8},{{9,10,11},12},{{13,14,15},16},{{17,18,19},20}}" },
  { _I_, SET_LINE D_SPHERE "const SPHERE s4_3[] = {{{1,2,3,4}},{{5,6,7,8}},{{9,10,11,12}},{{13,14,15,16}},{{17,18,19,20}}};", "[ERROR]"},
  { _I_, SET_LINE D_SPHERE "const SPHERE s0 = {1,2,3,4}; const SPHERE s3[] = {s0,s0,s0,s0,s0};",
    "<SPHERE*5>{<SPHERE>{<float3>{1.000,2.000,3.000},4.000},<SPHERE>{<float3>{1.000,2.000,3.000},4.000},<SPHERE>{<float3>{1.000,2.000,3.000},4.000},<SPHERE>{<float3>{1.000,2.000,3.000},4.000},<SPHERE>{<float3>{1.000,2.000,3.000},4.000}}",
    "{{{$R,$R,$R},$R},{{$R,$R,$R},$R},{{$R,$R,$R},$R},{{$R,$R,$R},$R},{{$R,$R,$R},$R}}"},
  { _I_, SET_LINE D_SPHERE "const SPHERE s0 = {1,2,3,4}; const SPHERE s4[] = {{s0},{s0},{s0},{s0},{s0}};", "[ERROR]"},
  {_I_, SET_LINE D_SPHERE "const SPHERE s0[] = {1,2,3,4,5,6,7,8,9}; const SPHERE s5[] = {s0[0],s0[1],s0[2],s0[0],s0[1]};", 
    "<SPHERE*5>{<SPHERE>{<float3>{1.000,2.000,3.000},4.000},<SPHERE>{<float3>{5.000,6.000,7.000},8.000},<SPHERE>{<float3>{9.000,0.000,0.000},0.000},<SPHERE>{<float3>{1.000,2.000,3.000},4.000},<SPHERE>{<float3>{5.000,6.000,7.000},8.000}}",
    "{{{$R,$R,$R},$R},{{$R,$R,$R},$R},{{$R,$R,$R},$R},{{$R,$R,$R},$R},{{$R,$R,$R},$R}}"},

  {_I_, SET_LINE D_SPHERE "SPHERE s0; SPHERE s5[] = {s0,s0,s0,s0,s0};", "<SPHERE*5>{<SPHERE>{s0},<SPHERE>{s0},<SPHERE>{s0},<SPHERE>{s0},<SPHERE>{s0}}", "{{s0},{s0},{s0},{s0},{s0}}"},
  {_I_, SET_LINE D_SPHERE "float3 o; SPHERE s5[] = {o,0,o,0,o,0};", "<SPHERE*3>{<SPHERE>{<float3>{o},0},<SPHERE>{<float3>{o},0},<SPHERE>{<float3>{o},0}}", "{{{o},0},{{o},0},{{o},0}}"},
  {_I_, SET_LINE "struct LG{float3 pos; float4 clr; float factor; }; const LG lg={float3(0,0,0), float4(0), 3};", "<LG>{<float3>{0.000,0.000,0.000},<float4>{0.000,0.000,0.000,0.000},3}", "{{$R,$R,$R},{$R,$R,$R,$R},3}"},

#define D_STR_AAA "struct AAA { int n0; int m[5]; };"
#define D_STR_BBB "struct BBB { int n1; AAA a[4]; };"
#define D_STR_CCC "struct CCC { int n2; BBB b[3]; };"
  {_I_, SET_LINE D_STR_AAA D_STR_BBB D_STR_CCC "const CCC c[2] = {"
    "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,"
    "50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,"
    "100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,"
    "120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,"
    "140,141,142,143,144,145,146,147,148,149,150,151,};"
    ,
    "<CCC*2>{"
    "<CCC>{0,<BBB*3>{<BBB>{1,<AAA*4>{<AAA>{2,<int*5>{3,4,5,6,7}},<AAA>{8,<int*5>{9,10,11,12,13}},<AAA>{14,<int*5>{15,16,17,18,19}},<AAA>{20,<int*5>{21,22,23,24,25}}}},<BBB>{26,<AAA*4>{<AAA>{27,<int*5>{28,29,30,31,32}},<AAA>{33,<int*5>{34,35,36,37,38}},<AAA>{39,<int*5>{40,41,42,43,44}},<AAA>{45,<int*5>{46,47,48,49,50}}}},<BBB>{51,<AAA*4>{<AAA>{52,<int*5>{53,54,55,56,57}},<AAA>{58,<int*5>{59,60,61,62,63}},<AAA>{64,<int*5>{65,66,67,68,69}},<AAA>{70,<int*5>{71,72,73,74,75}}}}}},"    
    "<CCC>{76,<BBB*3>{<BBB>{77,<AAA*4>{<AAA>{78,<int*5>{79,80,81,82,83}},<AAA>{84,<int*5>{85,86,87,88,89}},<AAA>{90,<int*5>{91,92,93,94,95}},<AAA>{96,<int*5>{97,98,99,100,101}}}},<BBB>{102,<AAA*4>{<AAA>{103,<int*5>{104,105,106,107,108}},<AAA>{109,<int*5>{110,111,112,113,114}},<AAA>{115,<int*5>{116,117,118,119,120}},<AAA>{121,<int*5>{122,123,124,125,126}}}},<BBB>{127,<AAA*4>{<AAA>{128,<int*5>{129,130,131,132,133}},<AAA>{134,<int*5>{135,136,137,138,139}},<AAA>{140,<int*5>{141,142,143,144,145}},<AAA>{146,<int*5>{147,148,149,150,151}}}}}}}"
    ,
    "{{0,{{1,{{2,{3,4,5,6,7}},{8,{9,10,11,12,13}},{14,{15,16,17,18,19}},{20,{21,22,23,24,25}}}},{26,{{27,{28,29,30,31,32}},{33,{34,35,36,37,38}},{39,{40,41,42,43,44}},{45,{46,47,48,49,50}}}},{51,{{52,{53,54,55,56,57}},{58,{59,60,61,62,63}},{64,{65,66,67,68,69}},{70,{71,72,73,74,75}}}}}},"
    "{76,{{77,{{78,{79,80,81,82,83}},{84,{85,86,87,88,89}},{90,{91,92,93,94,95}},{96,{97,98,99,100,101}}}},{102,{{103,{104,105,106,107,108}},{109,{110,111,112,113,114}},{115,{116,117,118,119,120}},{121,{122,123,124,125,126}}}},{127,{{128,{129,130,131,132,133}},{134,{135,136,137,138,139}},{140,{141,142,143,144,145}},{146,{147,148,149,150,151}}}}}}}"
    ,
    {
      "c[0].b[0].a[0].n0", 2,
      "c[1].b[1].a[1].m[1]", 111,
      "c[1].b[1].n1", 102,
      "c[1].b[2].a[3].m[4]", 151,
      "c[0].n2", 0,
      "c[0].b[2].n1", 51,
      "c[0].b[2].a[3].m[2]", 73,
    },
  },
#endif
  NULL
};

void RemoveBrace(clStringA& strOut, const clStringA& strIn)
{
  strOut.Reserve(strIn.GetLength());
  clStringA::LPCSTR p = strIn;
  b32 bOn = TRUE;
  for(; *p != '\0'; p++)
  {
    if(*p == '<') {
      bOn = FALSE;
    }
    else if(*p == '>') {
      bOn = TRUE;
    }
    else if(bOn) {
      strOut.Append(*p);
    }
  }
}

#define STR_GLOBAL "global_"

void TestInitList()
{
  using namespace UVShader;
  CodeParser expp;

  expp.Invoke("EnableDumpSyntaxTree", "YES");
  expp.Invoke("EnableDumpScope", "YES");

  TRACE("测试初始化列表...\n");
  for(int i = 0; g_aInitListSample[i].szExpression != NULL; i++)
  {
    const INITLIST_SAMPLE& ils = g_aInitListSample[i];
    clStringW strFilename(ils.szFilename);
    clStringA strSourceCode = ils.szExpression;

    // 叠加测试变量
    for(int n = 0; n < countof(ils.aConstSample); n++)
    {
      if(ils.aConstSample[n].szExpression == NULL) {
        continue;
      }
      strSourceCode.AppendFormat("\r\nconst int " STR_GLOBAL "%d=%s;", n, ils.aConstSample[n].szExpression);
    }

    TRACE("%s(%d) : 测试代码↓\n-------\n%s\n-------\n", __FILE__, ils.nLine, ils.szExpression);

    expp.Attach(strSourceCode, strSourceCode.GetLength(), 0, strFilename);
    expp.GenerateTokens();
    GXBOOL result = expp.Parse();

    if(ils.szResult == NULL ||
      (result == FALSE && clstd::strcmpT(ils.szResult, "[ERROR]") == 0)) {
      continue;
    }

    // 检查常量计算结果
    CodeParser::StatementArray stats = expp.GetStatements();
    for(auto it = stats.begin(); it != stats.end(); ++it)
    {
      if(it->type != CodeParser::StatementType_Definition ||
        it->sRoot.pNode->Operand[1].IsNode() == FALSE)
      {
        continue;
      }

      clStringA strName;
      SYNTAXNODE* pAssignment = it->sRoot.pNode->Operand[1].pNode;
      // "global_*"这个名字肯定是token而不是node
      if(pAssignment->Operand[0].IsToken() == FALSE) {
        continue;
      }
      pAssignment->Operand[0].ToString(strName);
      if(pAssignment->mode != SYNTAXNODE::MODE_Opcode || pAssignment->pOpcode == NULL ||
        *pAssignment->pOpcode != '=' || strName.BeginsWith(STR_GLOBAL) == FALSE)
      {
        continue;
      }

      clStringA strIndex = strName;
      strIndex.Remove(0, sizeof(STR_GLOBAL) - 1);
      const int index = strIndex.ToInteger();
      VALUE value;
      //ils.aConstSample[index]
      ASSERT(pAssignment->Operand[1].IsReplaced()); // 肯定计算出了常量值
      expp.GetRepalcedValue(value, pAssignment->Operand[1]);
      if((value.rank != VALUE::Rank_Signed && value.rank != VALUE::Rank_Signed64 && value.nValue64 != ils.aConstSample[index].value) ||
        (value.rank != VALUE::Rank_Unsigned && value.rank != VALUE::Rank_Unsigned64 && value.uValue64 != ils.aConstSample[index].value))
      {
        TRACE("%s(%d): 常量计算结果不一致，预期结果是%d，实际结果是%s\n", ils.szFilename, ils.nLine,
          ils.aConstSample[index].value, value.ToString());
        CLBREAK;
      }
      else
      {
        TRACE("%s=%s\n", strName.CStr(), value.ToString());
      }

      CLNOP
    }

    // 检查逻辑结构列表
    clStringArrayA& sStrArray = expp.DbgGetExpressionStack();
    
    // 去掉其它调试信息
    while(sStrArray.back()[0] != '<') {
      sStrArray.pop_back();
    }

    if(sStrArray.back() != ils.szResult) {
      TRACE("%s(%d): 结构化结果不一致\n%s\n(期望值)%s\n(计算值)%s\n",
        ils.szFilename,
        ils.nLine,
        ils.szExpression,
        ils.szResult,
        sStrArray.back().CStr() );
      CLBREAK;
      continue;
    }
    sStrArray.pop_back();
    clStringA strList;

    if(ils.szRearrange != NULL) {
      strList = ils.szRearrange;
    }
    else {
      RemoveBrace(strList, ils.szResult);
    }

    if(sStrArray.back() != strList)
    {
      TRACE("%s(%d): 初始化列表结果不一致\n%s\n(期望值)%s\n(计算值)%s\n",
        ils.szFilename,
        ils.nLine,
        ils.szExpression,
        strList,
        sStrArray.back().CStr());
      CLBREAK;
    }
    CLNOP
  }
  TRACE("测试初始化列表[完毕]\n");
}

#if 0
void TestStruct()
{
  // 前后列表接续
  const int nin_0[][4][4] = { {},{1,2,3,4,5,6,7,8,9} };  // <int*4*4*2>{<int*4*4>{}, <int*4*4>{<int*4>{1,2,3,4},<int*4>{5,6,7,8},<int*4>{9}}}
  const int nin_1[][4][4] = { {1,2,3,4,5,6},{7,8,9} };   // <int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4},<int*4*4>{5,6}},<int*4*4>{<int*4>{7,8,9}}}
  const int nin_2[][4][4] = { {1,2,3,4,5,6},{{7,8,9}} }; // <int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4},<int*4*4>{5,6}},<int*4*4>{<int*4>{7,8,9}}}
  const int nin_3[][4][4] = { {{1,2,3,4}},{5,6,7,8,9} }; // <int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4}},<int*4*4>{<int*4>{5,6,7,8},<int*4>{9}}}
  const int nin_4[][4][4] = { {1,2,3,4},{5,6,7,8,9} };   // <int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4}},<int*4*4>{<int*4>{5,6,7,8},<int*4>{9}}}
  const int nin_5[][4][4] = { {1,2,3,4},5,6,7,8,9 };     // <int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4}},<int*4*4>{<int*4>{5,6,7,8},<int*4>{9}}}
  const int nin_6[][4][4] = { {{1,2,3,4},5,6,7,8,9} };   // <int*4*4*1>{<int*4*4>{<int*4>{1,2,3,4},<int*4>{5,6,7,8},<int*4>{9}}}}
  const int nin_7[][4][4] = { {{1,2,3,4},5},6,7,8,9 }; // <int*4*4*2>{<int*4*4>{<int*4>{1,2,3,4},<int*4>{5}},<int*4*4>{<int*4>{6,7,8,9}}}

  {
    struct ST_A { int a, b, c, d; };
    const ST_A a = { 2,3,4 }; // <ST_A>{2,3,4}
    const ST_A a0 = { {2}, {3}, {4} }; // <ST_A>{2,3,4}
    const ST_A a1 = { {{2}}, {{3}}, {{4}} }; // <ST_A>{2,3,4}
    const ST_A a2 = { {{{2}}}, {{{3}}}, {{{4}}} }; // <ST_A>{2,3,4}
    const ST_A a3 = { 2, 3, 4 }; // <ST_A>{2,3,4}
    const ST_A a4 = { {2}, 3, 4 }; // <ST_A>{2,3,4}
    const ST_A a5 = { {{2}}, 3, 4 }; // <ST_A>{2,3,4}
    const ST_A a6 = { {{2}},{3},4 }; // <ST_A>{2,3,4}
    const ST_A a7 = { {2},{{3}},4 }; // <ST_A>{2,3,4}
    //const ST_A a8_ = { {2},{3,4} }; // [ERROR]
    //const ST_A a9_ = { {},2,3,4 }; // [ERROR]
  }

  {
    struct ST_B2 { int a, b; };
    struct ST_B3 { int a, b, c; };
    struct ST_B4 { int a, b, c, d; };

    const ST_B3 b0 = { {2}, {3}, {4} }; // ", "<ST_B3>{2,3,4}"},
    const ST_B3 b1[4] = { {2}, {3}, {4} }; // ", "<ST_B3*4>{<ST_B3>{2},<ST_B3>{3},<ST_B3>{4}}"},
    const ST_B2 b2[3] = { {1},2,3 }; // ", "<ST_B2*3>{<ST_B2>{1},<ST_B2>{2,3}}"},
    const ST_B2 b3[4][3] = { {{1},2},3 }; // ", "<ST_B2*3*4>{<ST_B2*3>{<ST_B2>{1},<ST_B2>{2}},<ST_B2*3>{<ST_B2>{3}}}"},
    const ST_B2 b4[3] = { {1},2,{3} }; // ", "<ST_B2*3>{<ST_B2>{1},<ST_B2>{2,3}}"},
    const ST_B2 b5[4][3] = { {1},2,{3} }; // ", "<ST_B2*3*4>{<ST_B2*3>{<ST_B2>{1}},<ST_B2*3>{<ST_B2>{2,3}}}"},
    const ST_B2 b6[3] = { 1,{2},{3} }; // ", "<ST_B2*3>{<ST_B2>{1,2},<ST_B2>{3}}"},
    const ST_B3 b7[4] = { 2, 3, 4 }; // ", "<ST_B3*4>{<ST_B3>{2,3,4}}"},
    const ST_B4 b8[6] = { {1,2,3}, {4,5,6}, {7,8,9} }; // ", "<ST_B4*6>{<ST_B4>{1,2,3},<ST_B4>{4,5,6},<ST_B4>{7,8,9} }"},
  }


  {
    // 饱和列表，列表储存达到上限的元素
    struct ST_2 { int a, b; };
    struct ST_2_2 { ST_2 a, b; };
    const ST_2 q2_1[2][2][2] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 }; // ", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2},<ST_2>{3,4}},<ST_2*2>{<ST_2>{5,6},<ST_2>{7,8}}},<ST_2*2*2>{<ST_2*2>{<ST_2>{9,10},<ST_2>{11,12}},<ST_2*2>{<ST_2>{13,14},<ST_2>{15,16}}}}"},
    const ST_2 q2_2[2][2][2] = { {1,2,3,4,5,6,7,8} }; // ", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2},<ST_2>{3,4}},<ST_2*2>{<ST_2>{5,6},<ST_2>{7,8}}}}"},
    const ST_2 q2_3[2][2][2] = { {{1,2,3,4}} };   // ", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2},<ST_2>{3,4}}}}"},
    const ST_2 q2_4[2][2][2] = { {{{1,2}}} };     // ", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2}}}}"},
    const ST_2 q2_5[2][2][2] = { {{{{1},{2}}}} }; // ", "<ST_2*2*2*2>{<ST_2*2*2>{<ST_2*2>{<ST_2>{1,2}}}}"},

    const ST_2_2 q2_2_1[2][2] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 }; // ", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2},<ST_2>{3,4}},<ST_2_2>{<ST_2>{5,6},<ST_2>{7,8}}},<ST_2_2*2>{<ST_2_2>{<ST_2>{9,10},<ST_2>{11,12}},<ST_2_2>{<ST_2>{13,14},<ST_2>{15,16}}}}"},
    const ST_2_2 q2_2_2[2][2] = { {1,2,3,4,5,6,7,8} }; // ", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2},<ST_2>{3,4}},<ST_2_2>{<ST_2>{5,6},<ST_2>{7,8}}}}"},
    const ST_2_2 q2_2_3[2][2] = { {{1,2,3,4}} };   // ", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2},<ST_2>{3,4}}}}"},
    const ST_2_2 q2_2_4[2][2] = { {{{1,2}}} };     // ", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2}}}}"},
    const ST_2_2 q2_2_5[2][2] = { {{{{1},{2}}}} }; // ", "<ST_2_2*2*2>{<ST_2_2*2>{<ST_2_2>{<ST_2>{1,2}}}}"},
  }


  {
    struct ST_9 { int a, b, c, d, e, f, g, h, i; };
    struct ST_6_9 { ST_9 a, b, c, d, e, f; };
    struct ST_3_6_9 { ST_6_9 a, b, c; };

    const ST_9 tr1[3][6] = { 1,2,3,4,5,6,7,8,9 };                         // ", "<ST_9*6*3>{<ST_9*6>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    const ST_9 tr2[3][6] = { { 1,2,3,4,5,6,7,8,9 } };                     // ", "<ST_9*6*3>{<ST_9*6>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    const ST_9 tr3[3][6] = { {{ 1,2,3,4,5,6,7,8,9 }} };                   // ", "<ST_9*6*3>{<ST_9*6>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    const ST_9 tr4[3][6] = { {{ {1},{2},{3},{4},{5},{6},{7},{8},{9} }} }; // ", "<ST_9*6*3>{<ST_9*6>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    // const ST_9 tr5_[3][6] = {{{ {{1},{2},{3},{4},{5},{6},{7},{8},{9}} }}}; // [ERROR]

    const ST_6_9 tr1_6[3] = { 1,2,3,4,5,6,7,8,9 };                         // ", "<ST_6_9*3>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    const ST_6_9 tr2_6[3] = { { 1,2,3,4,5,6,7,8,9 } };                     // ", "<ST_6_9*3>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    const ST_6_9 tr3_6[3] = { {{ 1,2,3,4,5,6,7,8,9 }} };                   // ", "<ST_6_9*3>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    const ST_6_9 tr4_6[3] = { {{ {1},{2},{3},{4},{5},{6},{7},{8},{9} }} }; // ", "<ST_6_9*3>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    //const ST_6_9 tr5_6_[3] = {{{ {{1},{2},{3},{4},{5},{6},{7},{8},{9}} }}}; // [ERROR]

    const ST_3_6_9 tr1_3_6 = { 1,2,3,4,5,6,7,8,9 };                         // ", "<ST_3_6_9>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    const ST_3_6_9 tr2_3_6 = { { 1,2,3,4,5,6,7,8,9 } };                     // ", "<ST_3_6_9>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    const ST_3_6_9 tr3_3_6 = { {{ 1,2,3,4,5,6,7,8,9 }} };                   // ", "<ST_3_6_9>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    const ST_3_6_9 tr4_3_6 = { {{ {1},{2},{3},{4},{5},{6},{7},{8},{9} }} }; // ", "<ST_3_6_9>{<ST_6_9>{<ST_9>{1,2,3,4,5,6,7,8,9}}}"},
    //const ST_3_6_9 tr5_3_6_ = {{{ {{1},{2},{3},{4},{5},{6},{7},{8},{9}} }}}; // [ERROR]
  }

  {
    struct STU_4 { int a, b, c, d; };
    const STU_4 qu1[3][9] = { { 1,2,3,4,5,6,7,8,9 } }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}"},
    const STU_4 qu2[3][9] = { { 1,2,3,4,5,6},{7,8,9} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6}},<STU_4*9>{<STU_4>{7,8,9}}}"},
    const STU_4 qu3[3][9] = { { {1},{2},{3},{4},{5},{6},{7},{8},{9} } }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1},<STU_4>{2},<STU_4>{3},<STU_4>{4},<STU_4>{5},<STU_4>{6},<STU_4>{7},<STU_4>{8},<STU_4>{9}}}"},
    const STU_4 qu4[3][9] = { { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} } }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1},<STU_4>{2},<STU_4>{3},<STU_4>{4},<STU_4>{5},<STU_4>{6},<STU_4>{7},<STU_4>{8},<STU_4>{9}}}"},
    const STU_4 qu5[3][9] = { {1},{2},{3} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1}},<STU_4*9>{<STU_4>{2}},<STU_4*9>{<STU_4>{3}}}"},
    const STU_4 qu6[3][9] = { {{1}},{{2}},{{3}} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1}},<STU_4*9>{<STU_4>{2}},<STU_4*9>{<STU_4>{3}}}"},
    const STU_4 qu7[3][2] = { {1,2,3,4,5,6,7,8},{11,12,13,14,15,16,17,18},{21,22,23,24,25,26,27,28} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8}},<STU_4*9>{<STU_4>{11,12,13,14},<STU_4>{15,16,17,18}},<STU_4*9>{<STU_4>{21,22,23,24},<STU_4>{25,26,27,28}}}"},
    const STU_4 nn1[9][6] = { 1,2,3,4,5,6,7,8,9 }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}"},
    const STU_4 nn2[9][6] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1}},<STU_4*9>{<STU_4>{2}},<STU_4*9>{<STU_4>{3}},<STU_4*9>{<STU_4>{4}},<STU_4*9>{<STU_4>{5}},<STU_4*9>{<STU_4>{6}},<STU_4*9>{<STU_4>{7}},<STU_4*9>{<STU_4>{8}},<STU_4*9>{<STU_4>{9}}}"},
    const STU_4 nn3[9][6] = { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1}},<STU_4*9>{<STU_4>{2}},<STU_4*9>{<STU_4>{3}},<STU_4*9>{<STU_4>{4}},<STU_4*9>{<STU_4>{5}},<STU_4*9>{<STU_4>{6}},<STU_4*9>{<STU_4>{7}},<STU_4*9>{<STU_4>{8}},<STU_4*9>{<STU_4>{9}}}"},
    const STU_4 nn4[9][6] = { {{{1}}},{{{2}}},{{{3}}},{{{4}}},{{{5}}},{{{6}}},{{{{7}}}},{{{8}}},{{{9}}} }; // ","<STU_4*9*3>{<STU_4*9>{<STU_4>{1}},<STU_4*9>{<STU_4>{2}},<STU_4*9>{<STU_4>{3}},<STU_4*9>{<STU_4>{4}},<STU_4*9>{<STU_4>{5}},<STU_4*9>{<STU_4>{6}},<STU_4*9>{<STU_4>{7}},<STU_4*9>{<STU_4>{8}},<STU_4*9>{<STU_4>{9}}}"},
  }

  {
    struct STU_4 { int a, b, c, d; };
    struct STU_2_4 { STU_4 a[2]; };
    struct STU_6_4 { STU_4 a[6]; };
    struct STU_9_4 { STU_4 a[9]; };

    const STU_9_4 qu1[3] = { { 1,2,3,4,5,6,7,8,9 } }; // ","<STU_9_4*3>{<STU_9_4>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}}"},
    const STU_9_4 qu2[3] = { { 1,2,3,4,5,6},{7,8,9 } }; // ","<STU_9_4*3>{<STU_9_4>{<STU_4*9>{<STU_4>{1,2,3,4},<STU_4>{5,6}}},<STU_9_4>{<STU_4*9>{<STU_4>{7,8,9}}}}"},
    //const STU_9_4 qu3_[3] = { { {1},{2},{3},{4},{5},{6},{7},{8},{9} } }; // ","[ERROR]"},
    //const STU_9_4 qu4_[3] = { { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} } }; // ","[ERROR]"},
    const STU_9_4 qu5[3] = { {1},{2},{3} }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4*9>{<STU_4>{1}}},<STU_9_4>{<STU_4*9>{<STU_4>{2}}},<STU_9_4>{<STU_4*9>{<STU_4>{3}}}}"},
    const STU_9_4 qu6[3] = { {{1}},{{2}},{{3}} }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4*9>{<STU_4>{1}}},<STU_9_4>{<STU_4*9>{<STU_4>{2}}},<STU_9_4>{<STU_4*9>{<STU_4>{3}}}}"},
    const STU_2_4 qu7[3] = { {1,2,3,4,5,6,7,8},{11,12,13,14,15,16,17,18},{21,22,23,24,25,26,27,28} }; // ", "<STU_2_4*3>{<STU_2_4>{<STU_4*2>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8}}},<STU_2_4>{<STU_4*2>{<STU_4>{11,12,13,14},<STU_4>{15,16,17,18}}},<STU_2_4>{<STU_4*2>{<STU_4>{21,22,23,24},<STU_4>{25,26,27,28}}}}"},
    const STU_6_4 nn1[9] = { 1,2,3,4,5,6,7,8,9 }; // ", "<STU_6_4*3>{<STU_6_4>{<STU_4*6>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}}"},
    const STU_6_4 nn2[9] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4*6>{<STU_4>{1}}},<STU_6_4>{<STU_4*6>{<STU_4>{2}}},<STU_6_4>{<STU_4*6>{<STU_4>{3}}},<STU_6_4>{<STU_4*6>{<STU_4>{4}}},<STU_6_4>{<STU_4*6>{<STU_4>{5}}},<STU_6_4>{<STU_4*6>{<STU_4>{6}}},<STU_6_4>{<STU_4*6>{<STU_4>{7}},<STU_6_4>{<STU_4*6>{<STU_4>{8}}},<STU_6_4>{<STU_4*6>{<STU_4>{9}}}}"},
    const STU_6_4 nn3[9] = { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4*6>{<STU_4>{1}}},<STU_6_4>{<STU_4*6>{<STU_4>{2}}},<STU_6_4>{<STU_4*6>{<STU_4>{3}}},<STU_6_4>{<STU_4*6>{<STU_4>{4}}},<STU_6_4>{<STU_4*6>{<STU_4>{5}}},<STU_6_4>{<STU_4*6>{<STU_4>{6}}},<STU_6_4>{<STU_4*6>{<STU_4>{7}},<STU_6_4>{<STU_4*6>{<STU_4>{8}}},<STU_6_4>{<STU_4*6>{<STU_4>{9}}}}"},
    const STU_6_4 nn4[9] = { {{{1}}},{{{2}}},{{{3}}},{{{4}}},{{{5}}},{{{6}}},{{{{7}}}},{{{8}}},{{{9}}} }; // ","<STU_6_4*9>{<STU_6_4>{<STU_4*6>{<STU_4>{1}}},<STU_6_4>{<STU_4*6>{<STU_4>{2}}},<STU_6_4>{<STU_4*6>{<STU_4>{3}}},<STU_6_4>{<STU_4*6>{<STU_4>{4}}},<STU_6_4>{<STU_4*6>{<STU_4>{5}}},<STU_6_4>{<STU_4*6>{<STU_4>{6}}},<STU_6_4>{<STU_4*6>{<STU_4>{7}},<STU_6_4>{<STU_4*6>{<STU_4>{8}}},<STU_6_4>{<STU_4*6>{<STU_4>{9}}}}"},
  }

  {
    struct STU_4 { int a, b, c, d; };
    struct STU_2_4 { STU_4 a, b; };
    struct STU_6_4 { STU_4 a, b, c, d, e, f; };
    struct STU_9_4 { STU_4 a, b, c, d, e, f, g, h, i; };

    const STU_9_4 qu1[3] = { { 1,2,3,4,5,6,7,8,9 } }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}"},
    const STU_9_4 qu2[3] = { { 1,2,3,4,5,6},{7,8,9 } }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1,2,3,4},<STU_4>{5,6}},<STU_9_4>{<STU_4>{7,8,9}}}"},
    const STU_9_4 qu3[3] = { { {1},{2},{3},{4},{5},{6},{7},{8},{9} } }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1},<STU_4>{2},<STU_4>{3},<STU_4>{4},<STU_4>{5},<STU_4>{6},<STU_4>{7},<STU_4>{8},<STU_4>{9}}}"},
    const STU_9_4 qu4[3] = { { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} } }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1},<STU_4>{2},<STU_4>{3},<STU_4>{4},<STU_4>{5},<STU_4>{6},<STU_4>{7},<STU_4>{8},<STU_4>{9}}}"},
    const STU_9_4 qu5[3] = { {1},{2},{3} }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1}},<STU_9_4>{<STU_4>{2}},<STU_9_4>{<STU_4>{3}}}"},
    const STU_9_4 qu6[3] = { {{1}},{{2}},{{3}} }; // ", "<STU_9_4*3>{<STU_9_4>{<STU_4>{1}},<STU_9_4>{<STU_4>{2}},<STU_9_4>{<STU_4>{3}}}"},
    const STU_2_4 qu7[3] = { {1,2,3,4,5,6,7,8},{11,12,13,14,15,16,17,18},{21,22,23,24,25,26,27,28} }; // ", "<STU_2_4*3>{<STU_2_4>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8}},<STU_2_4>{<STU_4>{11,12,13,14},<STU_4>{15,16,17,18}},<STU_2_4>{<STU_4>{21,22,23,24},<STU_4>{25,26,27,28}}}"},
    const STU_6_4 nn1[9] = { 1,2,3,4,5,6,7,8,9 }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4>{1,2,3,4},<STU_4>{5,6,7,8},<STU_4>{9}}}"},
    const STU_6_4 nn2[9] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4>{1}},<STU_6_4>{<STU_4>{2}},<STU_6_4>{<STU_4>{3}},<STU_6_4>{<STU_4>{4}},<STU_6_4>{<STU_4>{5}},<STU_6_4>{<STU_4>{6}},<STU_6_4>{<STU_4>{7}},<STU_6_4>{<STU_4>{8}},<STU_6_4>{<STU_4>{9}}}"},
    const STU_6_4 nn3[9] = { {{1}},{{2}},{{3}},{{4}},{{5}},{{6}},{{7}},{{8}},{{9}} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4>{1}},<STU_6_4>{<STU_4>{2}},<STU_6_4>{<STU_4>{3}},<STU_6_4>{<STU_4>{4}},<STU_6_4>{<STU_4>{5}},<STU_6_4>{<STU_4>{6}},<STU_6_4>{<STU_4>{7}},<STU_6_4>{<STU_4>{8}},<STU_6_4>{<STU_4>{9}}}"},
    const STU_6_4 nn4[9] = { {{{1}}},{{{2}}},{{{3}}},{{{4}}},{{{5}}},{{{6}}},{{{{7}}}},{{{8}}},{{{9}}} }; // ", "<STU_6_4*9>{<STU_6_4>{<STU_4>{1}},<STU_6_4>{<STU_4>{2}},<STU_6_4>{<STU_4>{3}},<STU_6_4>{<STU_4>{4}},<STU_6_4>{<STU_4>{5}},<STU_6_4>{<STU_4>{6}},<STU_6_4>{<STU_4>{7}},<STU_6_4>{<STU_4>{8}},<STU_6_4>{<STU_4>{9}}}"},
  }

  {
    struct ST_2 { int a[2]; };
    struct ST_3 { int a[3]; };
    struct ST_6 { int a[6]; };
    struct ST_9 { int a[9]; };

    //const ST_9 g1_[6] = { { {1},{2},{3}, {4},{5},{6}, {7},{8},{9} } }; // ", "[ERROR]"},
    const ST_9 h3[6] = { {2,3,6, 2,4,3, 2,4,3} }; // ", "<ST_9*6>{<ST_9>{<int*9>{2,3,6,2,4,3,2,4,3}}}"},
    const ST_6 g0[9] = { {1},{2},{3},{4},{5},{6},{7},{8},{9} }; // ", "<ST_6*9>{<ST_6>{<int*6>{1}},<ST_6>{<int*6>{2}},<ST_6>{<int*6>{3}},<ST_6>{<int*6>{4}},<ST_6>{<int*6>{5}},<ST_6>{<int*6>{6}},<ST_6>{<int*6>{7}},<ST_6>{<int*6>{8}},<ST_6>{<int*6>{9}}}"},

    const ST_9 h4[9][9] = { {2,{3},4,5,6,7,8,9,10,11} }; // ", "<ST_9*9*9>{<ST_9*9>{<ST_9>{<int*9>{2,3,4,5,6,7,8,9,10}},<ST_9>{<int*9>{11}}}}"},
    const ST_9 h4b[9][9] = { 2,{3},4,5,6,7,8,9,10,11 };  // ", "<ST_9*9*9>{<ST_9*9>{<ST_9>{<int*9>{2,3,4,5,6,7,8,9,10}},<ST_9>{<int*9>{11}}}}"},
    //const ST_9 h4c_[9][9] = { 2,{3,0},4,5,6,7,8,9,10,11 }; // ", "[ERROR]"},
    const ST_9 h5[9][9] = { {2,{{{{{3}}}}},4,5,6,7,8,9,10,11} }; // ", "<ST_9*9*9>{<ST_9*9>{<ST_9>{<int*9>{2,3,4,5,6,7,8,9,10}},<ST_9>{<int*9>{11}}}}"},
    const ST_9 h5a[9][9] = { {{{2}},{{{{{3}}}}},4,5,6,7,8,9,10,11} }; // ", "<ST_9*9*9>{<ST_9*9>{<ST_9>{<int*9>{2}},<ST_9>{<int*9>{3}},<ST_9>{<int*9>{4,5,6,7,8,9,10,11}}}}"},
    const ST_2 h6[4] = { 0, 5, {1, 3}, 0, 2, 4 }; // ", "<ST_2*4>{<ST_2>{<int*2>{0,5}},<ST_2>{<int*2>{1,3}},<ST_2>{<int*2>{0,2}},<ST_2>{<int*2>{4}}}"},
    const ST_2 h7[4] = { 0, 5, {1}, 0, 2, 4 }; // ", "<ST_2*2>{<ST_2>{<int*2>{0,5}},<ST_2>{<int*2>{1}},<ST_2>{<int*2>{0,2}},<ST_2>{<int*2>{4}}}"},
    const ST_3 h8[4] = { 0, 5, {1}, 0, 2, 4 }; // ", "<ST_3*4>{<ST_3>{<int*2>{0,5,1}},<ST_3>{<int*3>{0,2,4}}}"},
  }

  {
    struct ST3{ int a[3]; };
    const ST3 grou0[3][3] = { {0},{5},{6} }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{0}}},<ST3*3>{<ST3>{<int*3>{5}}},<ST3*3>{<ST3>{<int*3>{6}}}}"},
    const ST3 grou1[3][3] = { {0,1,2},{5},{6} }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{0,1,2}}},<ST3*3>{<ST3>{<int*3>{5}}},<ST3*3>{<ST3>{<int*3>{6}}}}"},
    const ST3 grou2[3][3] = { {1}, 2, 3, 4, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1}}},<ST3*3>{<ST3>{<int*3>{2,3,4}},<ST3>{<int*3>{5,6,7}},<ST3>{<int*3>{8}}}}"},
    const ST3 grou3[3][3] = { 1, {2}, 3, 4, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}"},
    const ST3 grou4[3][3] = { 1, 2, {3}, 4, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}"},
    //const ST3 grou5_[3][3] = { 1, {2, 3}, 4, 5, 6, 7, 8 }; //", "[ERROR]"},
    //const ST3 grou6_[3][3] = { 1, {{2}, 3}, 4, 5, 6, 7, 8 }; //", "[ERROR]"},
    const ST3 grou7[3][3] = { 1, 2, 3, {4}, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4}},<ST3>{<int*3>{5,6,7}}},<ST3*3>{<ST3>{<int*3>{8}}}}"},
    const ST3 grou8[3][3] = { {1, 2, 3}, 4, 5, 6, 7, 8 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}}},<ST3*3>{<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}"},
    //const ST3 grou9_[2][3] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 }; //", "[ERROR]"},
    //const ST3 grou10_[3][3] = { 1,{2,3},4,5,6,7,8,9 }; //", "[ERROR]"},
    //const ST3 grou11_[3][3] = { 1,{2,3,4},5,6,7,8,9 }; //", "[ERROR]"},
    //const ST3 grou12_[3][3] = { 1,{2,{}},3,4,5,6,7,8,9 }; //", "[ERROR]"},
    const ST3 grou13[3][3] = { 1,{2,},3,4,5,6,7,8,9 }; //", "<ST3*3*3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8,9}}}}"},
    //const ST3 grou14_[3][3] = { 1,{,2},3,4,5,6,7,8,9 }; //", "[ERROR]"},
  }

  {
    struct ST3 { int a[3]; };
    struct ST3x3 { ST3 a[3]; };

    const ST3x3 grou0[3] = { {0},{5},{6} }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{0}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{5}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{6}}}}}"},
    const ST3x3 grou1[3] = { {0,1,2},{5},{6} }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{0,1,2}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{5}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{6}}}}}"},
    const ST3x3 grou2[3] = { {1}, 2, 3, 4, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{2,3,4}},<ST3>{<int*3>{5,6,7}},<ST3>{<int*3>{8}}}}}"},
    const ST3x3 grou3[3] = { 1, {2}, 3, 4, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}}"},
    const ST3x3 grou4[3] = { 1, 2, {3}, 4, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}}"},
    //const ST3x3 grou5_[3] = { 1, {2, 3}, 4, 5, 6, 7, 8 }; //", "[ERROR]"},
    //const ST3x3 grou6_[3] = { 1, {{2}, 3}, 4, 5, 6, 7, 8 }; //", "[ERROR]"},
    const ST3x3 grou7[3] = { 1, 2, 3, {4}, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4}},<ST3>{<int*3>{5,6,7}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{8}}}}}"},
    const ST3x3 grou8[3] = { {1, 2, 3}, 4, 5, 6, 7, 8 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}}}},<ST3x3>{<ST3*3>{<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8}}}}}"},
    //const ST3x3 grou9_[2] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 }; //", "[ERROR]"},
    //const ST3x3 grou10_[3] = { 1,{2,3},4,5,6,7,8,9 }; //", "[ERROR]"},
    //const ST3x3 grou11_[3] = { 1,{2,3,4},5,6,7,8,9 }; //", "[ERROR]"},
    //const ST3x3 grou12_[3] = { 1,{2,{}},3,4,5,6,7,8,9 }; //", "[ERROR]"},
    const ST3x3 grou13[3] = { 1,{2,},3,4,5,6,7,8,9 }; //", "<ST3x3*3>{<ST3x3>{<ST3*3>{<ST3>{<int*3>{1,2,3}},<ST3>{<int*3>{4,5,6}},<ST3>{<int*3>{7,8,9}}}}}"},
    //const ST3x3 grou14_[3] = { 1,{,2},3,4,5,6,7,8,9 }; //", "[ERROR]"},
  }

  {
    struct ST2 { int a[2]; };
    struct ST2x2 { ST2 a[2]; };
    struct ST2x2x4 { ST2x2 a[4]; };
    const ST2x2x4 arr_9 = { 1,{2},3,4,5,6,7,8,9,10,11,12,13,14,15 }; // ", "<ST2x2x4>{<ST2x2*4>{<ST2x2>{<ST2*2>{<ST2>{<int*2>{1,2}},<ST2>{<int*2>{3,4}}}},<ST2x2>{<ST2*2>{<ST2>{<int*2>{5,6}},<ST2>{<int*2>{7,8}}}},<ST2x2>{<ST2*2>{<ST2>{<int*2>{9,10}},<ST2>{<int*2>{11,12}}}},<ST2x2>{<ST2*2>{<ST2>{<int*2>{13,14}},<ST2>{<int*2>{15}}}}}}"},
  }

  {
    struct ST2 { int a, b; };
    // 测试自适应长度
    //const ST2 autoleng_0_[3][] = { 2,3,4 }; // ", "[ERROR]"},
    const ST2 autoleng_00[] = { 2,3,4 }; // ", "<ST2*2>{<ST2>{2,3},<ST2>{4}}"},
    const ST2 autoleng_01[] = { {2},{3},{4} }; // ", "<ST2*3>{<ST2>{2},<ST2>{3},<ST2>{4}}"},
    const ST2 autoleng_02[] = { {2},3,4 }; // ", "<ST2*2>{<ST2>{2},<ST2>{3,4}}"},
    const ST2 autoleng_03[] = { {2,3},4 }; // ", "<ST2*2>{<ST2>{2,3},<ST2>{4}}"},
    const ST2 autoleng_04[] = { 2,{3},4 }; // ", "<ST2*2>{<ST2>{2,3},<ST2>{4}}"},
    const ST2 autoleng_0[][2] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 };         // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2 autoleng_1[][2] = { {1},2,3,4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*5>{<ST2*2>{<ST2>{1}},<ST2*2>{<ST2>{2,3},<ST2>{4,5}},<ST2*2>{<ST2>{6,7},<ST2>{8,9}},<ST2*2>{<ST2>{10,11},<ST2>{12,13}},<ST2*2>{<ST2>{14,15}}}"},
    const ST2 autoleng_2[][2] = { {1},{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2*2*6>{<ST2*2>{<ST2>{1}},<ST2*2>{<ST2>{2}},<ST2*2>{<ST2>{3,4},<ST2>{5,6}},<ST2*2>{<ST2>{7,8},<ST2>{9,10}},<ST2*2>{<ST2>{11,12},<ST2>{13,14}},<ST2*2>{<ST2>{15}}}"},
    const ST2 autoleng_3[][2] = { {1,2,3},4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3}},<ST2*2>{<ST2>{4,5},<ST2>{6,7}},<ST2*2>{<ST2>{8,9},<ST2>{10,11}},<ST2*2>{<ST2>{12,13},<ST2>{14,15}}}"},
    const ST2 autoleng_4[][2] = { 1,2,{3},4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3}},<ST2*2>{<ST2>{4,5},<ST2>{6,7}},<ST2*2>{<ST2>{8,9},<ST2>{10,11}},<ST2*2>{<ST2>{12,13},<ST2>{14,15}}}"},
    const ST2 autoleng_5[][2] = { 1,2,{{3}},4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3}},<ST2*2>{<ST2>{4,5},<ST2>{6,7}},<ST2*2>{<ST2>{8,9},<ST2>{10,11}},<ST2*2>{<ST2>{12,13},<ST2>{14,15}}}"},
    const ST2 autoleng_6[][2] = { 1,2,{3,4},5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2 autoleng_7[][2] = { 1,2,{3,4},5,6,{7,8},9,10,11,12,13,14,15 };     // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2 autoleng_8[][2] = { 1,2,{3,4},{{5,6},{7,8}},9,10,11,12,13,14,15 }; // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2 autoleng_9[][2] = { 1,{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2 autoleng_a[][2] = { 1,{{2}},3,4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2*2*4>{<ST2*2>{<ST2>{1,2},<ST2>{3,4}},<ST2*2>{<ST2>{5,6},<ST2>{7,8}},<ST2*2>{<ST2>{9,10},<ST2>{11,12}},<ST2*2>{<ST2>{13,14},<ST2>{15}}}"},
  }

  {
    struct ST2 { int a, b; };
    struct ST2x2 { ST2 a, b; };
    // 测试自适应长度
    const ST2x2 autoleng_0[] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 };         // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2x2 autoleng_1[] = { {1},2,3,4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*5>{<ST2x2>{<ST2>{1}},<ST2x2>{<ST2>{2,3},<ST2>{4,5}},<ST2x2>{<ST2>{6,7},<ST2>{8,9}},<ST2x2>{<ST2>{10,11},<ST2>{12,13}},<ST2x2>{<ST2>{14,15}}}"},
    const ST2x2 autoleng_2[] = { {1},{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2x2*6>{<ST2x2>{<ST2>{1}},<ST2x2>{<ST2>{2}},<ST2x2>{<ST2>{3,4},<ST2>{5,6}},<ST2x2>{<ST2>{7,8},<ST2>{9,10}},<ST2x2>{<ST2>{11,12},<ST2>{13,14}},<ST2x2>{<ST2>{15}}}"},
    const ST2x2 autoleng_3[] = { {1,2,3},4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3}},<ST2x2>{<ST2>{4,5},<ST2>{6,7}},<ST2x2>{<ST2>{8,9},<ST2>{10,11}},<ST2x2>{<ST2>{12,13},<ST2>{14,15}}}"},
    const ST2x2 autoleng_4[] = { 1,2,{3},4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3}},<ST2x2>{<ST2>{4,5},<ST2>{6,7}},<ST2x2>{<ST2>{8,9},<ST2>{10,11}},<ST2x2>{<ST2>{12,13},<ST2>{14,15}}}"},
    const ST2x2 autoleng_5[] = { 1,2,{{3}},4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3}},<ST2x2>{<ST2>{4,5},<ST2>{6,7}},<ST2x2>{<ST2>{8,9},<ST2>{10,11}},<ST2x2>{<ST2>{12,13},<ST2>{14,15}}}"},
    const ST2x2 autoleng_6[] = { 1,2,{3,4},5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2x2 autoleng_7[] = { 1,2,{3,4},5,6,{7,8},9,10,11,12,13,14,15 };     // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2x2 autoleng_8[] = { 1,2,{3,4},{{5,6},{7,8}},9,10,11,12,13,14,15 }; // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2x2 autoleng_9[] = { 1,{2},3,4,5,6,7,8,9,10,11,12,13,14,15 };       // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
    const ST2x2 autoleng_a[] = { 1,{{2}},3,4,5,6,7,8,9,10,11,12,13,14,15 };     // ", "<ST2x2*4>{<ST2x2>{<ST2>{1,2},<ST2>{3,4}},<ST2x2>{<ST2>{5,6},<ST2>{7,8}},<ST2x2>{<ST2>{9,10},<ST2>{11,12}},<ST2x2>{<ST2>{13,14},<ST2>{15}}}"},
  }

  {
    // 前后列表接续
    struct ST4{int a,b,c,d;};
    const ST4 nin_0[][4] = { {},{1,2,3,4,5,6,7,8,9} };  // <ST4*4*2>{<ST4*4>{}, <ST4*4>{<ST4>{1,2,3,4},<ST4>{5,6,7,8},<ST4>{9}}}
    const ST4 nin_1[][4] = { {1,2,3,4,5,6},{7,8,9} };   // <ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4},<ST4*4>{5,6}},<ST4*4>{<ST4>{7,8,9}}}
    const ST4 nin_2[][4] = { {1,2,3,4,5,6},{{7,8,9}} }; // <ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4},<ST4*4>{5,6}},<ST4*4>{<ST4>{7,8,9}}}
    const ST4 nin_3[][4] = { {{1,2,3,4}},{5,6,7,8,9} }; // <ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4}},<ST4*4>{<ST4>{5,6,7,8},<ST4>{9}}}
    const ST4 nin_4[][4] = { {1,2,3,4},{5,6,7,8,9} };   // <ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4}},<ST4*4>{<ST4>{5,6,7,8},<ST4>{9}}}
    const ST4 nin_5[][4] = { {1,2,3,4},5,6,7,8,9 };     // <ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4}},<ST4*4>{<ST4>{5,6,7,8},<ST4>{9}}}
    const ST4 nin_6[][4] = { {{1,2,3,4},5,6,7,8,9} };   // <ST4*4*1>{<ST4*4>{<ST4>{1,2,3,4},<ST4>{5,6,7,8},<ST4>{9}}}}
    const ST4 nin_7[][4] = { {{1,2,3,4},5},6,7,8,9 }; // <ST4*4*2>{<ST4*4>{<ST4>{1,2,3,4},<ST4>{5}},<ST4*4>{<ST4>{6,7,8,9}}}
  }

  //////////////////////////////////////////////////////////////////////////

  struct STRU{float a,b;int c;};
  struct STRU2{float f;STRU s;int c;};

  const STRU stru0 = { 1, 2, 3 };         //", "<STRU>{1.0f, 2.0f, 3}"},
  const STRU stru1 = { {1},{2},{3} };     //", "<STRU>{1.0f, 2.0f, 3}"},
  const STRU stru2[] = { 1, 2, 3 };       //", "<STRU*1>{<STRU>{1.0f, 2.0f, 3.0f}}"},
  const STRU stru3[] = { {1}, 2, 3 };     //", "<STRU*2>{<STRU>{1.0f}, <STRU>{2.0f, 3.0f}}"},
  const STRU stru4[] = { {1}, {2}, 3 };   //", "<STRU*2>{<STRU>{1.0f}, <STRU>{2.0f}, <STRU>{3.0f}}"},
  const STRU stru5[] = { {1}, {2}, {3} }; //", "<STRU*2>{<STRU>{1.0f}, <STRU>{2.0f}, <STRU>{3.0f}}"},

  const STRU stru6[] = { {{1}},{{1}},{{0}} }; //", "<STRU*2>{<STRU>{1.0f}, <STRU>{1.0f}, <STRU>{0.0f}}"],
  const STRU2 struc0 = { 1, 2, 3 };           //", "<STRU2>{1.0f, <STRU>{2.0f, 3.0f}}"],
  const STRU2 struc1 = { 1, {2}, 3 };         //", "<STRU2>{1.0f, <STRU>{2.0f}, 3}"],
  const STRU2 struc2[] = { 1, 2, 3 };         //", "<STRU2*1>{<STRU2>{1.0f, <STRU>{2.0f, 3.0f}}}"],
  const STRU2 struc3[] = { 1, {2}, 3 };       //", "<STRU2*1>{<STRU2>{1.0f, <STRU>{2.0f}, 3}}"],
}
#endif